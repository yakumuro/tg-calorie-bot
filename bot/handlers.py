from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from bot.database import add_user, get_user, add_meal, get_stats, get_meals_last_7_days
from bot.utils import calculate_daily_calories, get_main_menu, render_progress_bar
from bot.database import calculate_macros, delete_meals_for_day
from bot.yandex_gpt import analyze_food_with_gpt
from config.config import YANDEX_GPT_API_KEY, YANDEX_GPT_FOLDER_ID
import logging
from datetime import datetime, date
from collections import defaultdict

logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
NAME, WEIGHT, HEIGHT, AGE, GENDER, ACTIVITY, GOAL, TARGET_WEIGHT, GOAL_RATE = range(9)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
EDIT_NAME, EDIT_WEIGHT, EDIT_HEIGHT, EDIT_AGE, EDIT_GENDER, EDIT_ACTIVITY = range(9, 15)

EDIT_GOAL, EDIT_TARGET_WEIGHT, EDIT_GOAL_RATE = range(17, 20)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã
ADD_MEAL, AWAIT_CONFIRM = range(15, 17)

ACTIVITY_LABELS = {
    'none': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    'low': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è',
    'medium': '–°—Ä–µ–¥–Ω—è—è',
    'high': '–í—ã—Å–æ–∫–∞—è'
}


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    user_id = update.effective_user.id
    user = get_user(user_id)

    tutorial_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏.\n\n"
        "üë§ –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —è —Ä–∞—Å—Å—á–∏—Ç—É—é —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n"
        "üìù –î–æ–±–∞–≤–ª—è–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ ‚Äî —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã.\n"
        "üìä –°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, –∫–∞–∫ –±–ª–∏–∑–∫–æ —Ç—ã –∫ —Å–≤–æ–µ–π –Ω–æ—Ä–º–µ.\n\n"
        "**–ß—Ç–æ –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è!**"
    )

    user_text = (
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏ —è –∑–Ω–∞—é —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n\n"
            "- üìù –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ ‚Äî —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ—Å—ã.\n"
            "- üìä –°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ.\n"
            "- üë§ –†–µ–¥–∞–∫—Ç–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
        )

    if user:
        await update.message.reply_text(user_text, parse_mode="Markdown", reply_markup=get_main_menu())
        return ConversationHandler.END

    await update.message.reply_text(tutorial_text, parse_mode="Markdown", reply_markup=None)
    return NAME


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
    return WEIGHT


async def weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if weight <= 0: raise ValueError
        context.user_data['weight'] = weight
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
        return WEIGHT


async def height_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        if height <= 0: raise ValueError
        context.user_data['height'] = height
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT


async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age <= 0: raise ValueError
        context.user_data['age'] = age

        keyboard = [
            [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data='male'),
             InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data='female')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=reply_markup)
        return GENDER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
        return AGE


async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['gender'] = query.data

    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data='none')],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data='low')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data='medium')],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data='high')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    return ACTIVITY


async def activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    activity_code = query.data  # 'none', 'low', 'medium', 'high'
    context.user_data['activity_code'] = activity_code  # –∫–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    context.user_data['activity_level'] = ACTIVITY_LABELS[activity_code]  # –º–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å / –Ω–∞–±—Ä–∞—Ç—å / –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å)
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data='goal_lose'),
         InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data='goal_gain')],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data='goal_maintain')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=reply_markup)
    return GOAL


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END


# --- –ü—Ä–æ—Ñ–∏–ª—å ---
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. /start", reply_markup=None)
        return

    name = user["name"]
    weight = user["weight"]
    height = user["height"]
    age = user["age"]
    gender = user["gender"]
    activity_level = user["activity_level"]
    daily_calories = user["daily_calories"] or 0
    protein_norm = user["protein_norm"] or 0
    fat_norm = user["fat_norm"] or 0
    carbs_norm = user["carbs_norm"] or 0
    goal_type = user.get("goal_type", "maintain")
    target_weight = user.get("target_weight")
    goal_rate = user.get("goal_rate")

    gender_str = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"

    keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    extra = ""
    if goal_type and goal_type != "maintain":
        extra = f"\n<b>–¶–µ–ª—å</b>: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'}\n"
        extra += f"<b>–¶–µ–ª–µ–≤–æ–π –≤–µ—Å</b>: {target_weight} –∫–≥\n<b>–¢–µ–º–ø</b>: {goal_rate}\n\n"

    await update.message.reply_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>:\n\n"
        f"<b>–ò–º—è</b>: {name}\n<b>–í–µ—Å</b>: {weight} –∫–≥\n<b>–†–æ—Å—Ç</b>: {height} —Å–º\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {age}\n<b>–ü–æ–ª</b>: {gender_str}\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>: {activity_level}\n\n"
        f"{extra}"
        f"<b>üéØ –ù–æ—Ä–º–∞</b>: {daily_calories} –∫–∫–∞–ª\n"
        f"<b>ü•©–ë</b>: {protein_norm} –≥, <b>ü•ë–ñ</b>: {fat_norm} –≥, <b>üçû–£</b>: {carbs_norm} –≥",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: –Ω–∞—á–∞–ª–æ ---
async def edit_profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üë§ –ò–º—è", callback_data="edit_field_name"),
        InlineKeyboardButton("‚öñÔ∏è –í–µ—Å", callback_data="edit_field_weight")],
        [InlineKeyboardButton("üìè –†–æ—Å—Ç", callback_data="edit_field_height"),
        InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_field_age")],
        [InlineKeyboardButton("üöª –ü–æ–ª", callback_data="edit_field_gender"),
        InlineKeyboardButton("üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="edit_field_activity")],
        [InlineKeyboardButton("üéØ –¶–µ–ª—å", callback_data="edit_goal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)
    return "FIELD"


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: —à–∞–≥–∏ ---
async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    add_user(user_id, new_name, user["weight"], user["height"], user["age"], user["gender"], user["activity_level"], user["daily_calories"],
             goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), goal_rate=user.get("goal_rate"))

    await update.message.reply_text("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu())
    return ConversationHandler.END


async def edit_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if weight <= 0: raise ValueError

        user_id = update.effective_user.id
        user = get_user(user_id)
        if not user:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        # –ø–µ—Ä–µ—Å—á—ë—Ç
        activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
        new_calories = calculate_daily_calories(weight, user["height"], user["age"], user["gender"], activity_code)
        protein_norm, fat_norm, carbs_norm = calculate_macros(weight, new_calories)

        add_user(user_id, user["name"], weight, user["height"], user["age"], user["gender"], user["activity_level"], new_calories,
                 goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), goal_rate=user.get("goal_rate"))

        await update.message.reply_text(
            f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
            f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
        return EDIT_WEIGHT


async def edit_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        if height <= 0: raise ValueError

        user_id = update.effective_user.id
        user = get_user(user_id)
        if not user:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
        new_calories = calculate_daily_calories(user["weight"], height, user["age"], user["gender"], activity_code)
        protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)

        add_user(user_id, user["name"], user["weight"], height, user["age"], user["gender"], user["activity_level"], new_calories,
                 goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), goal_rate=user.get("goal_rate"))

        await update.message.reply_text(
            f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
            f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return EDIT_HEIGHT


async def edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age <= 0: raise ValueError

        user_id = update.effective_user.id
        user = get_user(user_id)
        if not user:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
        new_calories = calculate_daily_calories(user["weight"], user["height"], age, user["gender"], activity_code)
        protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)

        add_user(user_id, user["name"], user["weight"], user["height"], age, user["gender"], user["activity_level"], new_calories,
                 goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), goal_rate=user.get("goal_rate"))

        await update.message.reply_text(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
            f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25):")
        return EDIT_AGE


async def edit_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    gender = "male" if query.data == "edit_gender_male" else "female"

    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    activity_level = user["activity_level"]
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == activity_level][0]
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], gender, activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)

    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], gender, activity_level, new_calories,
             goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), goal_rate=user.get("goal_rate"))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ø–æ–ª–∞: {e}")

    await query.message.chat.send_message(
        f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END


async def edit_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    activity_code = query.data.replace("edit_act_", "")
    activity_label = ACTIVITY_LABELS[activity_code]

    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)

    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], activity_label, new_calories,
             goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), goal_rate=user.get("goal_rate"))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    await query.message.chat.send_message(
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END

async def edit_goal_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="edit_goal_lose")],
        [InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data="edit_goal_gain")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="edit_goal_maintain")]
    ]
    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_GOAL

async def edit_goal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    goal = query.data.replace("edit_goal_", "")
    context.user_data['edit_goal'] = goal

    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return ConversationHandler.END

    if goal == "maintain":
        activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
        daily_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], activity_code)
        protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], daily_calories)
        add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"],
                 user["activity_level"], daily_calories, goal_type='maintain', target_weight=None, goal_rate=None)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message –≤–º–µ—Å—Ç–æ edit_text –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏
        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.chat.send_message(
            f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ¬´–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å¬ª!\n"
            f"üéØ –ù–æ—Ä–º–∞: {daily_calories} –∫–∫–∞–ª\n"
            f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ —Ü–µ–ª—å –ø–æ—Ö—É–¥–µ—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å ‚Üí —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥):", reply_markup=None)
    return EDIT_TARGET_WEIGHT

async def edit_target_weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        target_weight = float(text)
        if target_weight <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.0):")
        return EDIT_TARGET_WEIGHT

    goal = context.user_data.get('edit_goal')
    current_weight = get_user(update.effective_user.id)["weight"]

    if goal == "lose" and not (target_weight < current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ:")
        return EDIT_TARGET_WEIGHT
    if goal == "gain" and not (target_weight > current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ:")
        return EDIT_TARGET_WEIGHT

    context.user_data['edit_target_weight'] = target_weight

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–º–ø
    if goal == "lose":
        keyboard = [
            [InlineKeyboardButton("–î–æ–ª–≥–æ –∏ –ª–µ–≥–∫–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="edit_rate_lose_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="edit_rate_lose_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 1.0 –∫–≥/–Ω–µ–¥", callback_data="edit_rate_lose_fast")]
        ]
    else:  # gain
        keyboard = [
            [InlineKeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="edit_rate_gain_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="edit_rate_gain_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 0.75 –∫–≥/–Ω–µ–¥", callback_data="edit_rate_gain_fast")]
        ]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_GOAL_RATE

async def edit_goal_rate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat = query.message.chat  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ —É–¥–∞–ª–µ–Ω–∏—è

    data = query.data.split("_")
    goal_type, rate_key = data[2], data[3]  # edit_rate_lose_medium ‚Üí ['edit','rate','lose','medium']

    kg_mapping = {
        "lose": {"slow": 0.25, "medium": 0.5, "fast": 1.0},
        "gain": {"slow": 0.25, "medium": 0.5, "fast": 0.75}
    }

    kg_per_week = kg_mapping[goal_type][rate_key]

    user_id = update.effective_user.id
    user = get_user(user_id)
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]

    maintenance = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], activity_code)
    daily_adjustment = (kg_per_week * 7700) / 7.0
    daily_calories = round(maintenance - daily_adjustment, 1) if goal_type == "lose" else round(maintenance + daily_adjustment, 1)

    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], daily_calories)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"],
             user["activity_level"], daily_calories, goal_type=goal_type,
             target_weight=context.user_data.get('edit_target_weight'),
             goal_rate=f"{kg_per_week}–∫–≥/–Ω–µ–¥")

    try:
        await query.message.delete()
    except Exception:
        pass

    await chat.send_message(
        f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
        f"üéØ {('–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å')} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
        f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {context.user_data.get('edit_target_weight')} –∫–≥\n"
        f"üéØ –ù–æ—Ä–º–∞ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏: {daily_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END



# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã ---
async def add_meal_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏, —á—Ç–æ —Å—ä–µ–ª. –ü–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —É–∫–∞–∑—ã–≤–∞—è –≤–µ—Å –ø–æ—Ä—Ü–∏–π –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", reply_markup=None)
    return ADD_MEAL


async def handle_food_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    food_text = update.message.text

    # üïí –°–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"
    processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    if not YANDEX_GPT_API_KEY or not YANDEX_GPT_FOLDER_ID:
        await update.message.reply_text("–û—à–∏–±–∫–∞: GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=get_main_menu())
        return ConversationHandler.END

    try:
        await context.bot.send_chat_action(update.effective_chat.id, "typing")
        result = await analyze_food_with_gpt(food_text, YANDEX_GPT_API_KEY, YANDEX_GPT_FOLDER_ID)

        items = result.get("items", [])
        totals = result.get("total", {"calories": 0, "protein": 0, "fat": 0, "carbs": 0})

        context.user_data['pending_meal'] = {
            'food_text': food_text,
            'calories': totals["calories"],
            'protein': totals["protein"],
            'fat': totals["fat"],
            'carbs': totals["carbs"],
            'items': items
        }

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"
        try:
            await processing_msg.delete()
        except Exception:
            pass

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        user_id = update.effective_user.id
        stats_data = get_stats(user_id)
        daily_norm = get_user(user_id)["daily_calories"]
        already_eaten = stats_data['day']['calories'] or 0
        projected = already_eaten + totals['calories'] or 0

        progress_after = render_progress_bar(projected, daily_norm)

        product_list = "\n".join(
            [f"‚Ä¢ {i['product']} ‚Äî {i['quantity']} ‚Äî {i['calories']} –∫–∫–∞–ª, "
             f"–ë: {i['protein']} –≥, –ñ: {i['fat']} –≥, –£: {i['carbs']} –≥" for i in items]
        )

        summary = f"""
<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>

{product_list}

<b>üçΩ –ò—Ç–æ–≥–æ:</b> {totals['calories']} –∫–∫–∞–ª  
ü•©–ë: {totals['protein']} –≥, ü•ë–ñ: {totals['fat']} –≥, üçû–£: {totals['carbs']} –≥

<b>üìä –ù–æ—Ä–º–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>
{progress_after}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_meal")],
            [InlineKeyboardButton("üîÅ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="retry_meal")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        msg = await update.message.reply_text(summary.strip(), reply_markup=reply_markup, parse_mode="HTML")
        context.user_data['last_meal_message_id'] = msg.message_id

        return AWAIT_CONFIRM

    except Exception as e:
        logger.error(f"GPT error: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END


async def confirm_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pending = context.user_data.get('pending_meal')
    if not pending:
        await query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    add_meal(
        update.effective_user.id,
        pending['food_text'],
        pending['calories'],
        pending['protein'],
        pending['fat'],
        pending['carbs']
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –µ–¥—ã + –∫–Ω–æ–ø–∫–∞–º–∏
    last_message_id = context.user_data.get('last_meal_message_id')
    if last_message_id:
        try:
            await query.message.chat.delete_message(last_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–¥–æ–π: {e}")
        context.user_data.pop('last_meal_message_id', None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await query.message.chat.send_message(
        f"‚úÖ –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
        f"üçΩ –î–æ–±–∞–≤–ª–µ–Ω–æ: {pending['calories']} –∫–∫–∞–ª\n"
        f"ü•©–ë: {pending['protein']} –≥, ü•ë–ñ: {pending['fat']} –≥, üçû–£: {pending['carbs']} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END



async def retry_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –µ–¥—ã + –∫–Ω–æ–ø–∫–∞–º–∏
    last_message_id = context.user_data.get('last_meal_message_id')
    if last_message_id:
        try:
            await query.message.chat.delete_message(last_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–¥–æ–π: {e}")
        context.user_data.pop('last_meal_message_id', None)

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –µ–¥—É –∑–∞–Ω–æ–≤–æ
    await query.message.chat.send_message(
        "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å—ä–µ–ª–∏. –ü–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —É–∫–∞–∑—ã–≤–∞—è –≤–µ—Å –ø–æ—Ä—Ü–∏–π –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:"
    )
    return ADD_MEAL



async def cancel_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END


# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. /start", reply_markup=None)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—É –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    daily_norm = user["daily_calories"] or 0
    protein_norm = user["protein_norm"] or 0
    fat_norm = user["fat_norm"] or 0
    carbs_norm = user["carbs_norm"] or 0

    stats_data = get_stats(user_id)

    progress_today = render_progress_bar(stats_data['day']['calories'], daily_norm)

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â—ë –ø—É—Å—Ç–∞—è, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º 0
    day_stats = stats_data.get('day', {})
    week_stats = stats_data.get('week', {})
    month_stats = stats_data.get('month', {})

    day_calories = day_stats.get('calories') or 0
    day_protein = day_stats.get('protein') or 0
    day_fat = day_stats.get('fat') or 0
    day_carbs = day_stats.get('carbs') or 0

    week_calories = week_stats.get('calories') or 0
    week_protein = week_stats.get('protein') or 0
    week_fat = week_stats.get('fat') or 0
    week_carbs = week_stats.get('carbs') or 0

    month_calories = month_stats.get('calories') or 0
    month_protein = month_stats.get('protein') or 0
    month_fat = month_stats.get('fat') or 0
    month_carbs = month_stats.get('carbs') or 0

    keyboard = [
    [InlineKeyboardButton("üìÖ –ú–µ–Ω—é –∑–∞ 7 –¥–Ω–µ–π", callback_data="last_7_days")],
    [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="clear_today")]
]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n\n"
        f"<b>–°–µ–≥–æ–¥–Ω—è</b>:\n\n"
        f"–ö–∞–ª–ª–æ—Ä–∏–π: {progress_today}\n\n"
        f"ü•©–ë–µ–ª–∫–æ–≤: {day_protein} / {protein_norm} –≥\n"
        f"ü•ë–ñ–∏—Ä–æ–≤: {day_fat} / {fat_norm} –≥\n"
        f"üçû–£–≥–ª–µ–≤–æ–¥–æ–≤: {day_carbs} / {carbs_norm} –≥\n\n"
        f"<b>üìÖ–ù–µ–¥–µ–ª—è</b>: {week_calories} –∫–∫–∞–ª (–ë: {week_protein} –≥, –ñ: {week_fat} –≥, –£: {week_carbs} –≥)\n"
        f"<b>üìÖ–ú–µ—Å—è—Ü</b>: {month_calories} –∫–∫–∞–ª (–ë: {month_protein} –≥, –ñ: {month_fat} –≥, –£: {month_carbs} –≥)",
        parse_mode="HTML",
        reply_markup=reply_markup
)

async def show_last_7_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    meals = get_meals_last_7_days(user_id)

    if not meals:
        await query.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_menu())
        return

    daily_meals = defaultdict(list)
    total_per_day = defaultdict(float)

    for meal in meals:
        date_str = meal['timestamp'].split()[0]
        date_friendly = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m")
        daily_meals[date_friendly].append(f"‚ñ™Ô∏è {meal['food_text']} ‚Äî {meal['calories']} –∫–∫–∞–ª")
        total_per_day[date_friendly] += meal['calories']

    message = "üóì <b>–ú–µ–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>:\n\n"
    for date, items in daily_meals.items():
        total = total_per_day[date]
        message += f"üìå<u><b>{date}</b> (–≤—Å–µ–≥–æ: {total} –∫–∫–∞–ª)</u>\n"
        message += "\n".join(items)
        message += "\n\n"

    await query.message.reply_text(message, parse_mode="HTML", reply_markup=get_main_menu())

async def clear_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    deleted = delete_meals_for_day(user_id)

    if deleted:
        await query.message.reply_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_menu())
    else:
        await query.message.reply_text(f"‚ÑπÔ∏è –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏.", reply_markup=get_main_menu())

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç."
    )

async def goal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    goal = query.data.replace("goal_", "")  # 'lose' | 'gain' | 'maintain'
    context.user_data['goal'] = goal

    user_id = update.effective_user.id
    name = context.user_data.get('name')
    weight = context.user_data.get('weight')
    height = context.user_data.get('height')
    age = context.user_data.get('age')
    gender = context.user_data.get('gender')
    activity_code = context.user_data.get('activity_code')
    activity_label = ACTIVITY_LABELS.get(activity_code, activity_code)

    # –ï—Å–ª–∏ —Ü–µ–ª—å - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É (–∫–∞–∫ —Ä–∞–Ω—å—à–µ), —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–æ—Ä–º—ã
    if goal == "maintain":
        try:
            daily_calories = calculate_daily_calories(weight, height, age, gender, activity_code)
            protein_norm, fat_norm, carbs_norm = calculate_macros(weight, daily_calories)
            add_user(user_id, name, weight, height, age, gender, activity_label, daily_calories,
                     goal_type='maintain', target_weight=None, goal_rate=None)

            await query.message.reply_text(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
                f"üéØ –¢–≤–æ—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):\n"
                f"<b>{daily_calories} –∫–∫–∞–ª</b>\n"
                f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(e)
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π /start –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

    # –ï—Å–ª–∏ —Ü–µ–ª—å –ø–æ—Ö—É–¥–µ—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä 70.0):", reply_markup=None)
    return TARGET_WEIGHT

async def target_weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    try:
        target = float(text)
        if target <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.0):")
        return TARGET_WEIGHT

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    goal = context.user_data.get('goal')
    current_weight = context.user_data.get('weight')
    if goal == "lose" and not (target < current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:")
        return TARGET_WEIGHT
    if goal == "gain" and not (target > current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:")
        return TARGET_WEIGHT

    context.user_data['target_weight'] = target

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–≥/–Ω–µ–¥)
    if goal == "lose":
        keyboard = [
            [InlineKeyboardButton("–î–æ–ª–≥–æ –∏ –ª–µ–≥–∫–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ (—Å–ª–æ–∂–Ω–æ) ‚Äî 1.0 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_fast")]
        ]
    else:  # gain
        keyboard = [
            [InlineKeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 0.75 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_fast")]
        ]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å):", reply_markup=InlineKeyboardMarkup(keyboard))
    return GOAL_RATE

async def goal_rate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # e.g. rate_lose_medium
    parts = data.split("_")
    # parts[1] == 'lose'|'gain', parts[2] == 'slow'|'medium'|'fast'
    if len(parts) < 3:
        await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â—ë —Ä–∞–∑.", reply_markup=get_main_menu())
        return ConversationHandler.END

    goal_type = parts[1]
    rate_key = parts[2]

    # kg/week mapping
    mapping = {
        "lose": {"slow": 0.25, "medium": 0.5, "fast": 1.0},
        "gain": {"slow": 0.25, "medium": 0.5, "fast": 0.75}
    }
    kg_per_week = mapping.get(goal_type, {}).get(rate_key, 0.5)
    rate_label = f"{rate_key}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    name = context.user_data.get('name')
    weight = context.user_data.get('weight')
    height = context.user_data.get('height')
    age = context.user_data.get('age')
    gender = context.user_data.get('gender')
    activity_code = context.user_data.get('activity_code')
    activity_label = context.user_data.get('activity_level')
    target_weight = context.user_data.get('target_weight')

    if None in (name, weight, height, age, gender, activity_code):
        await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ /start", reply_markup=get_main_menu())
        return ConversationHandler.END

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–ª–∏
    maintenance = calculate_daily_calories(weight, height, age, gender, activity_code)
    daily_adjustment = (kg_per_week * 7700) / 7.0  # 7700 –∫–∫–∞–ª ~ 1 –∫–≥
    if goal_type == "lose":
        daily_calories = round(maintenance - daily_adjustment, 1)
    else:  # gain
        daily_calories = round(maintenance + daily_adjustment, 1)

    # –ú–∏–Ω–∏–º—É–º –∫–∫–∞–ª (–∑–∞—â–∏—Ç–∞) ‚Äî –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
    min_cal = 1200 if gender == "female" else 1500
    if daily_calories < min_cal:
        await query.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–º–ø –¥–∞—ë—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫—É—é –Ω–æ—Ä–º—É ({daily_calories} –∫–∫–∞–ª). –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —â–∞–¥—è—â–∏–π —Ç–µ–º–ø."
        )
        return GOAL_RATE

    # –§–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ë–ñ–£ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    if goal_type == "lose":
        protein_factor = 2.0  # —á—É—Ç—å –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ
        fat_factor = 1.0
    elif goal_type == "gain":
        protein_factor = 1.6
        fat_factor = 1.0
    else:
        protein_factor = 1.8
        fat_factor = 1.0

    protein_norm, fat_norm, carbs_norm = calculate_macros(weight, daily_calories, protein_factor=protein_factor, fat_factor=fat_factor)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ goal
    user_id = update.effective_user.id
    add_user(user_id, name, weight, height, age, gender, activity_label, daily_calories,
             goal_type=goal_type, target_weight=target_weight, goal_rate=f"{kg_per_week}–∫–≥/–Ω–µ–¥")

    await query.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üéØ –¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
        f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n\n"
        f"üéØ –ù–æ—Ä–º–∞ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏: <b>{daily_calories} –∫–∫–∞–ª</b>\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END




# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
profile_handler = MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), profile)
stats_handler = MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats)

meal_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏$"), add_meal_start)],
    states={
        ADD_MEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_food_input)],
        AWAIT_CONFIRM: [
            CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$"),
            CallbackQueryHandler(retry_meal, pattern="^retry_meal$")
        ]
    },
    fallbacks=[CommandHandler('cancel', cancel_meal)],
    per_user=True
)

async def edit_field_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    field = query.data.replace("edit_field_", "")
    context.user_data['edit_field'] = field

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    try:
        if field == "name":
            await query.message.chat.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
            return EDIT_NAME
        elif field == "weight":
            await query.message.chat.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–∫–≥):")
            return EDIT_WEIGHT
        elif field == "height":
            await query.message.chat.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (—Å–º):")
            return EDIT_HEIGHT
        elif field == "age":
            await query.message.chat.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return EDIT_AGE
        elif field == "gender":
            keyboard = [
                [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="edit_gender_male"),
                 InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="edit_gender_female")]
            ]
            await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(keyboard))
            return EDIT_GENDER
        elif field == "activity":
            keyboard = [
                [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="edit_act_none")],
                [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="edit_act_low")],
                [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="edit_act_medium")],
                [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data="edit_act_high")]
            ]
            await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
            return EDIT_ACTIVITY
        elif field == "goal":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ü–µ–ª–∏
            keyboard = [
                [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="edit_goal_lose")],
                [InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data="edit_goal_gain")],
                [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="edit_goal_maintain")]
            ]
            await query.message.chat.send_message("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
            return EDIT_GOAL
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_field_handler: {e}")
        await query.message.chat.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END


edit_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(edit_profile_start, pattern="edit_profile")],
    states={
        "FIELD": [
            CallbackQueryHandler(edit_field_handler, pattern="^edit_field_"),
            CallbackQueryHandler(edit_goal_start, pattern="edit_goal")  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        ],
        EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
        EDIT_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_weight)],
        EDIT_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_height)],
        EDIT_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_age)],
        EDIT_GENDER: [CallbackQueryHandler(edit_gender, pattern="^edit_gender_")],
        EDIT_ACTIVITY: [CallbackQueryHandler(edit_activity, pattern="^edit_act_")],
        EDIT_GOAL: [CallbackQueryHandler(edit_goal_handler, pattern="^edit_goal_")],
        EDIT_TARGET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_target_weight_handler)],
        EDIT_GOAL_RATE: [CallbackQueryHandler(edit_goal_rate_handler, pattern="^edit_rate_")],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_user=True
)

# edit_goal_conv = ConversationHandler(
#     entry_points=[CallbackQueryHandler(edit_goal_start, pattern="edit_goal")],
#     states={
#         EDIT_GOAL: [CallbackQueryHandler(edit_goal_handler, pattern="^edit_goal_")],
#         EDIT_TARGET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_target_weight_handler)],
#         EDIT_GOAL_RATE: [CallbackQueryHandler(edit_goal_rate_handler, pattern="^edit_rate_")]
#     },
#     fallbacks=[CommandHandler('cancel', cancel)],
#     per_user=True
# )

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight_handler)],
        HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height_handler)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
        GENDER: [CallbackQueryHandler(gender_handler)],
        ACTIVITY: [CallbackQueryHandler(activity_handler)],
        GOAL: [CallbackQueryHandler(goal_handler, pattern="^goal_")],
        TARGET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, target_weight_handler)],
        GOAL_RATE: [CallbackQueryHandler(goal_rate_handler, pattern="^rate_")]
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_user=True
)

# –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
confirm_handler = CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$")
clear_today_handler = CallbackQueryHandler(clear_today, pattern="^clear_today$")
retry_handler = CallbackQueryHandler(retry_meal, pattern="^retry_meal$")
last_7_days_handler = CallbackQueryHandler(show_last_7_days, pattern="^last_7_days$")
goal_callback_handler = CallbackQueryHandler(goal_handler, pattern="^goal_")
goal_rate_callback_handler = CallbackQueryHandler(goal_rate_handler, pattern="^rate_")