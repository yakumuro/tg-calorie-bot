from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters, CallbackContext
)
from bot.database import get_db_connection, add_user, get_user, add_meal, get_stats, get_meals_last_7_days, set_notifications, get_notifications_status
from bot.utils import calculate_daily_calories, get_main_menu, render_progress_bar, render_menu_to_image
from bot.database import calculate_macros, delete_meals_for_day, get_user_goal_info, update_goal_start_date, get_goal_start_date, add_meal_reminder, clear_meal_reminders, get_meal_reminders
from bot.yandex_gpt import analyze_food_with_gpt, analyze_menu_with_gpt
from bot.rate_limiter import call_gpt_with_limits, RateLimitExceeded, check_menu_rate_limit, update_menu_request_time, RateLimitExceededMenu
from config.config import YANDEX_GPT_API_KEY, YANDEX_GPT_FOLDER_ID
from datetime import datetime
from collections import defaultdict
from bot.charts import create_monthly_chart
from bot.yandex_speechkit import YandexSpeechToText
import os
from logger_config import logger
import random
from bot.reminder_scheduler import send_meal_reminders


stt = YandexSpeechToText()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
NAME, WEIGHT, HEIGHT, AGE, GENDER, ACTIVITY, GOAL, TARGET_WEIGHT, GOAL_RATE = range(9)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
EDIT_NAME, EDIT_WEIGHT, EDIT_HEIGHT, EDIT_AGE, EDIT_GENDER, EDIT_ACTIVITY = range(9, 15)

EDIT_GOAL, EDIT_TARGET_WEIGHT, EDIT_GOAL_RATE = range(17, 20)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
CHOOSING_MEALS, TYPING_PREFS = range(2)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã
ADD_MEAL, AWAIT_CONFIRM = range(15, 17)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
SET_REMINDER_COUNT, SET_MEAL_NAME, SET_MEAL_TIME = range(3)

ACTIVITY_LABELS = {
    'none': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    'low': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è',
    'medium': '–°—Ä–µ–¥–Ω—è—è',
    'high': '–í—ã—Å–æ–∫–∞—è'
}

disclaimer_text = (
        "\n\n‚ÑπÔ∏è –Ø –Ω–µ –≤—Ä–∞—á, –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –±–æ—Ç–∞ –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –∏ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Å—è –∫ —Å–≤–æ–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É. "
        "–ü—Ä–∏ –ª—é–±—ã—Ö —Å–æ–º–Ω–µ–Ω–∏—è—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
    )

MEAL_EXAMPLES = [
    "200 –≥ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏, –æ–±–∂–∞—Ä–µ–Ω–Ω–æ–π –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ, —Å 50 –≥ –∫–∏–Ω–æ–∞ –∏ 100 –≥ –±—Ä–æ–∫–∫–æ–ª–∏",
    "–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ –Ω–∞ –≤–æ–¥–µ —Å 1 –±–∞–Ω–∞–Ω–æ–º, 10 –≥ –æ—Ä–µ—Ö–æ–≤ –∏ 1 —á.–ª. –º—ë–¥–∞",
    "2 —è–π—Ü–∞ –≤—Å–º—è—Ç–∫—É, 1 –ª–æ–º—Ç–∏–∫ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞, 50 –≥ –∞–≤–æ–∫–∞–¥–æ –∏ 5 –ø–æ–º–∏–¥–æ—Ä–æ–≤ —á–µ—Ä—Ä–∏",
    "150 –≥ –ª–æ—Å–æ—Å—è –Ω–∞ –≥—Ä–∏–ª–µ, 100 –≥ —Ç—É—à–µ–Ω–æ–π —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã –∏ 80 –≥ —Å–ª–∞–¥–∫–æ–≥–æ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
    "–°–º—É–∑–∏: 200 –º–ª –º–∏–Ω–¥–∞–ª—å–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞, 1 —è–±–ª–æ–∫–æ, 30 –≥ –æ–≤—Å—è–Ω—ã—Ö —Ö–ª–æ–ø—å–µ–≤, 10 –≥ —Å–µ–º—è–Ω —á–∏–∞",
    "100 –≥ —Ç–≤–æ—Ä–æ–≥–∞ 5%, 1 –≥—Ä—É—à–∞, 5 –≥ –≥—Ä–µ—Ü–∫–∏—Ö –æ—Ä–µ—Ö–æ–≤ –∏ –∫–æ—Ä–∏—Ü–∞ –ø–æ –≤–∫—É—Å—É",
    "200 –≥ –∏–Ω–¥–µ–π–∫–∏ –Ω–∞ –ø–∞—Ä—É, 100 –≥ —Ä–∏—Å–∞ –±–∞—Å–º–∞—Ç–∏, 80 –≥ –∑–µ–ª–µ–Ω–æ–≥–æ –≥–æ—Ä–æ—à–∫–∞",
    "–°–∞–ª–∞—Ç: 50 –≥ —Ä—É–∫–∫–æ–ª—ã, 50 –≥ —à–ø–∏–Ω–∞—Ç–∞, 100 –≥ –ø–æ–º–∏–¥–æ—Ä–æ–≤, 30 –≥ —Å—ã—Ä–∞ —Ñ–µ—Ç–∞, 1 —Å—Ç.–ª. –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
    "–ó–∞–ø–µ—á—ë–Ω–Ω—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å 150 –≥ —Å 100 –≥ –∑–∞–ø–µ—á–µ–Ω–Ω–æ–π –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏ –∏ 50 –≥ —Ç—É—à—ë–Ω–æ–π –º–æ—Ä–∫–æ–≤–∏",
    "–°—ç–Ω–¥–≤–∏—á: 2 –ª–æ–º—Ç–∏–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞, 50 –≥ —Ç—É–Ω—Ü–∞, 20 –≥ –Ω–µ–∂–∏—Ä–Ω–æ–≥–æ –π–æ–≥—É—Ä—Ç–∞, –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞",
    "–Ø–∏—á–Ω–∏—Ü–∞ –∏–∑ 2 —è–∏—Ü, 50 –≥ —à–ø–∏–Ω–∞—Ç–∞ –∏ 50 –≥ —à–∞–º–ø–∏–Ω—å–æ–Ω–æ–≤, –æ–±–∂–∞—Ä–µ–Ω–Ω—ã—Ö –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ",
    "–°–º—É–∑–∏-–±–æ–ª: 150 –º–ª –∫–µ—Ñ–∏—Ä–∞, 50 –≥ –º—é—Å–ª–∏, 1 –±–∞–Ω–∞–Ω, 20 –≥ —Å–µ–º—è–Ω –ª—å–Ω–∞, 5 —è–≥–æ–¥ –∫–ª—É–±–Ω–∏–∫–∏",
    "150 –≥ –≥–æ–≤—è–∂—å–µ–π –≤—ã—Ä–µ–∑–∫–∏, –æ–±–∂–∞—Ä–µ–Ω–Ω–æ–π –Ω–∞ –≥—Ä–∏–ª–µ, —Å 100 –≥ –∫–∏–Ω–æ–∞ –∏ 80 –≥ –±—Ä–æ–∫–∫–æ–ª–∏",
    "–°–∞–ª–∞—Ç –∏–∑ –∫–∏–Ω–æ–∞: 70 –≥ –∫–∏–Ω–æ–∞, 50 –≥ –æ–≥—É—Ä—Ü–∞, 50 –≥ –ø–µ—Ä—Ü–∞, 30 –≥ –Ω—É—Ç–∞, 1 —á.–ª. –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
    "100 –≥ —Ä–∏–∫–æ—Ç—Ç—ã, 50 –≥ –º–∞–ª–∏–Ω—ã, 1 —á.–ª. –º—ë–¥–∞ –∏ 10 –≥ –º–∏–Ω–¥–∞–ª—è"
]

MENU_EXAMPLES = [
    "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏ - –±–æ–ª—å—à–µ —Ñ—Ä—É–∫—Ç–æ–≤ –≤ –ø–µ—Ä–µ–∫—É—Å–∞—Ö",
    "–ù–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –ª–∞–∫—Ç–æ–∑—ã - –∑–∞–º–µ–Ω–∏—Ç—å –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏",
    "–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∏–Ω–æ–∞, –≥—Ä–µ—á–∫—É –∏–ª–∏ —Ä–∏—Å –≤–º–µ—Å—Ç–æ –ø—à–µ–Ω–∏—Ü—ã",
    "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —Ä—ã–±—É –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã - –±–æ–ª—å—à–µ –±–ª—é–¥ –∏–∑ –∫—É—Ä–∏—Ü—ã –∏ –∏–Ω–¥–µ–π–∫–∏",
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ - –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ –±–æ–±–æ–≤—ã—Ö –∏ —è–∏—Ü –¥–ª—è –±–µ–ª–∫–∞",
    "–í–µ–≥–∞–Ω—Å—Ç–≤–æ - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ç–æ—Ñ—É, —á–µ—á–µ–≤–∏—Ü—É –∏ –æ—Ä–µ—Ö–∏ (–∫—Ä–æ–º–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤)",
    "–ë–µ–∑ –∂–∞—Ä–µ–Ω–æ–≥–æ - –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –∏–ª–∏ –∑–∞–ø–µ–∫–∞—Ç—å",
    "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –±—é–¥–∂–µ—Ç—É (–¥–æ 300 ‚ÇΩ –∑–∞ –ø–æ—Ä—Ü–∏—é) - –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
    "–ú–∏–Ω–∏–º—É–º —Å–ª–∞–¥–∫–æ–≥–æ - –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –Ω–µ—Å–ª–∞–¥–∫–∏—Ö –ø–µ—Ä–µ–∫—É—Å–æ–≤ (–æ–≤–æ—â–∏, –æ—Ä–µ—Ö–∏, —Ö—É–º—É—Å)",
    "–•–æ—á—É –º–∏–Ω–∏–º—É–º 30 –≥ –±–µ–ª–∫–∞ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏—ë–º–µ - —É–ø–æ—Ä –Ω–∞ –º—è—Å–æ, –ø—Ç–∏—Ü—É, —è–π—Ü–∞ –∏–ª–∏ –±–æ–±–æ–≤—ã–µ"
]

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started /start command")
    user = get_user(user_id)

    tutorial_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏.\n\n"
        "üë§ –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —è —Ä–∞—Å—Å—á–∏—Ç—É—é —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n"
        "üçú –î–æ–±–∞–≤–ª—è–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ - —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã.\n"
        "üìä –°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, –∫–∞–∫ –±–ª–∏–∑–∫–æ —Ç—ã –∫ —Å–≤–æ–µ–π –Ω–æ—Ä–º–µ.\n"
        "üìù –°–æ–∑–¥–∞–≤–∞–π –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏\n\n"
        "üëá –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ - –Ω–∞—á–Ω—ë–º —Å –∏–º–µ–Ω–∏.–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–≤–µ–¥—ë—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
    )

    user_text = (
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏ —è –∑–Ω–∞—é —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n\n"
            "- üçú –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ - —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£.\n"
            "- üìä –°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ.\n"
            "- üìù –°–æ–∑–¥–∞–≤–∞–π –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏\n"
            "- üë§ –†–µ–¥–∞–∫—Ç–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n\n"
            
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
        )

    if user:
        logger.info(f"User {user_id} already registered, sending main menu")
        await update.message.reply_text(user_text, parse_mode="Markdown", reply_markup=get_main_menu())
        return ConversationHandler.END
    logger.info(f"User {user_id} not registered, sending tutorial")
    await update.message.reply_text(tutorial_text, parse_mode="Markdown", reply_markup=None)
    return NAME


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = update.message.text
    context.user_data['name'] = update.message.text
    logger.info(f"User {user_id} entered name: {name}")
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
    return WEIGHT


async def weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        weight = float(update.message.text)
        if weight <= 0: raise ValueError
        context.user_data['weight'] = weight
        logger.info(f"User {user_id} entered weight: {weight}")
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT
    except ValueError:
        logger.warning(f"User {user_id} entered invalid weight: {update.message.text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
        return WEIGHT


async def height_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        height = int(update.message.text)
        if height <= 0: raise ValueError
        context.user_data['height'] = height
        logger.info(f"User {user_id} entered height: {height}")
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    except ValueError:
        logger.warning(f"User {user_id} entered invalid height: {update.message.text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT


async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        age = int(update.message.text)
        if age <= 0: raise ValueError
        context.user_data['age'] = age
        logger.info(f"User {user_id} entered age: {age}")

        keyboard = [
            [InlineKeyboardButton("üöπ –ú—É–∂—Å–∫–æ–π", callback_data='male'),
             InlineKeyboardButton("üö∫ –ñ–µ–Ω—Å–∫–∏–π", callback_data='female')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=reply_markup)
        return GENDER
    except ValueError:
        logger.warning(f"User {user_id} entered invalid age: {update.message.text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
        return AGE


async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['gender'] = query.data
    logger.info(f"User {user_id} selected gender: {query.data}")

    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)", callback_data='none')],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞)", callback_data='low')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è (1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)", callback_data='medium')],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)", callback_data='high')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    return ACTIVITY

async def activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    activity_code = query.data  # 'none', 'low', 'medium', 'high'
    context.user_data['activity_code'] = activity_code  # –∫–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    context.user_data['activity_level'] = ACTIVITY_LABELS[activity_code]  # –º–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    logger.info(f"User {user_id} selected activity: {activity_code}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å / –Ω–∞–±—Ä–∞—Ç—å / –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å)
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data='goal_lose'),
         InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data='goal_gain')],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data='goal_maintain')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=reply_markup)
    return GOAL

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} canceled registration")
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END

# --- –ü—Ä–æ—Ñ–∏–ª—å ---
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested profile view")
    user = get_user(user_id)
    if not user:
        logger.warning(f"User {user_id} has no profile")
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. /start", reply_markup=None)
        return

    name = user["name"]
    weight = user["weight"]
    height = user["height"]
    age = user["age"]
    gender = user["gender"]
    activity_level = user["activity_level"]
    daily_calories = user["daily_calories"] or 0
    protein_norm = user["protein_norm"] or 0
    fat_norm = user["fat_norm"] or 0
    carbs_norm = user["carbs_norm"] or 0
    goal_type = user.get("goal_type", "maintain")
    target_weight = user.get("target_weight")
    goal_rate = user.get("goal_rate")

    gender_str = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"

    keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
                [InlineKeyboardButton("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="meal_reminders")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    extra = ""
    if goal_type and goal_type != "maintain":
        extra = f"\n<b>–¶–µ–ª—å</b>: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'}\n"
        extra += f"<b>–¶–µ–ª–µ–≤–æ–π –≤–µ—Å</b>: {target_weight} –∫–≥\n<b>–¢–µ–º–ø</b>: {goal_rate}\n\n"

    await update.message.reply_text(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>:\n\n"
        f"<b>–ò–º—è</b>: {name}\n<b>–í–µ—Å</b>: {weight} –∫–≥\n<b>–†–æ—Å—Ç</b>: {height} —Å–º\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {age}\n<b>–ü–æ–ª</b>: {gender_str}\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>: {activity_level}\n\n"
        f"{extra}"
        f"<b>üéØ –ù–æ—Ä–º–∞</b>: {daily_calories} –∫–∫–∞–ª\n"
        f"<b>ü•©–ë</b>: {protein_norm} –≥, <b>ü•ë–ñ</b>: {fat_norm} –≥, <b>üçû–£</b>: {carbs_norm} –≥",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    logger.info(f"User {user_id} profile displayed")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: –Ω–∞—á–∞–ª–æ ---

async def edit_profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    logger.info(f"User {user_id} started editing profile")

    keyboard = [
        [InlineKeyboardButton("üë§ –ò–º—è", callback_data="edit_name"),
        InlineKeyboardButton("‚öñÔ∏è –í–µ—Å", callback_data="edit_weight")],
        [InlineKeyboardButton("üìè –†–æ—Å—Ç", callback_data="edit_height"),
        InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [InlineKeyboardButton("üöª –ü–æ–ª", callback_data="edit_gender"),
        InlineKeyboardButton("üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="edit_activity")],
        [InlineKeyboardButton("üéØ –¶–µ–ª—å", callback_data="edit_goal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å üëá", reply_markup=reply_markup)
    logger.debug(f"User {user_id} edit profile menu sent")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
async def edit_name_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'name'
    await query.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=None)
    logger.info(f"User {user_id} editing field: name")

async def edit_weight_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'weight'
    await query.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–µ—Å (–∫–≥):", reply_markup=None)
    logger.info(f"User {user_id} editing field: weight")

async def edit_height_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'height'
    await query.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (—Å–º):", reply_markup=None)
    logger.info(f"User {user_id} editing field: height")

async def edit_age_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'age'
    await query.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=None)
    logger.info(f"User {user_id} editing field: age")

async def edit_gender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üöπ–ú—É–∂—Å–∫–æ–π", callback_data="set_gender_male"),
         InlineKeyboardButton("üö∫–ñ–µ–Ω—Å–∫–∏–π", callback_data="set_gender_female")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"User {user_id} failed to delete old message for gender edit: {e}")
        pass
    
    await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=reply_markup)
    logger.info(f"User {user_id} editing field: gender")

async def edit_activity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="set_activity_none")],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="set_activity_low")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="set_activity_medium")],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data="set_activity_high")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"User {user_id} failed to delete old message for activity edit: {e}")
        pass
    
    await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    logger.info(f"User {user_id} editing field: activity")

async def edit_goal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="set_goal_lose")],
        [InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data="set_goal_gain")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="set_goal_maintain")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"User {user_id} failed to delete old message for goal edit: {e}")
        pass
    
    await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=reply_markup)
    logger.info(f"User {user_id} editing field: goal")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def handle_all_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_all_text_input –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"editing_field: {context.user_data.get('editing_field')}")
    logger.info(f"editing_goal: {context.user_data.get('editing_goal')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if 'editing_field' not in context.user_data and 'editing_goal' not in context.user_data:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    text = update.message.text
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        context.user_data.pop('editing_field', None)
        context.user_data.pop('editing_goal', None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—è —Ü–µ–ª–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    goal_type = user.get("goal_type")
    target_weight = user.get("target_weight")
    goal_rate = user.get("goal_rate")

    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–ª–µ
    if 'editing_field' in context.user_data:
        field = context.user_data['editing_field']
        logger.info(f"User {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–µ {field}")

        try:
            if field == 'name':
                new_name = text
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    new_name,
                    user["weight"],
                    user["height"],
                    user["age"],
                    user["gender"],
                    user["activity_level"],
                    user["daily_calories"],
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu())
                logger.info(f"User {user_id} –æ–±–Ω–æ–≤–∏–ª –∏–º—è –Ω–∞ {text}")

            elif field == 'weight':
                weight = float(text)
                if weight <= 0:
                    raise ValueError
                activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
                new_calories = calculate_daily_calories(weight, user["height"], user["age"], user["gender"], activity_code)
                protein_norm, fat_norm, carbs_norm = calculate_macros(weight, new_calories)
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    user["name"],
                    weight,
                    user["height"],
                    user["age"],
                    user["gender"],
                    user["activity_level"],
                    new_calories,
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text(
                    f"‚úÖ <b>–í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
                    f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
                    parse_mode="HTML", reply_markup=get_main_menu()
                )
                logger.info(f"User {user_id} –æ–±–Ω–æ–≤–∏–ª –≤–µ—Å –Ω–∞ {weight} –∫–≥, –Ω–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª")

            elif field == 'height':
                height = int(text)
                if height <= 0:
                    raise ValueError
                activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
                new_calories = calculate_daily_calories(user["weight"], height, user["age"], user["gender"], activity_code)
                protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    user["name"],
                    user["weight"],
                    height,
                    user["age"],
                    user["gender"],
                    user["activity_level"],
                    new_calories,
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text(
                    f"‚úÖ <b>–†–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
                    f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
                    parse_mode="HTML", reply_markup=get_main_menu()
                )

            elif field == 'age':
                age = int(text)
                if age <= 0:
                    raise ValueError
                activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
                new_calories = calculate_daily_calories(user["weight"], user["height"], age, user["gender"], activity_code)
                protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    user["name"],
                    user["weight"],
                    user["height"],
                    age,
                    user["gender"],
                    user["activity_level"],
                    new_calories,
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text(
                    f"‚úÖ <b>–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
                    f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
                    parse_mode="HTML", reply_markup=get_main_menu()
                )

        except ValueError:
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—è {field}: {text}")
            await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
            return

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('editing_field', None)
    
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å (–≤–≤–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å)
    elif 'editing_goal' in context.user_data:
        goal_type = context.user_data['editing_goal']
        logger.info(f"User {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª—å {goal_type}")
        
        try:
            target_weight = float(text)
            if target_weight <= 0:
                raise ValueError
        except ValueError:
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—è {field}: {text}")
            await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.0):")
            return

        current_weight = user["weight"]

        if goal_type == "lose" and not (target_weight < current_weight):
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å {target_weight} –¥–ª—è —Ü–µ–ª–∏ {goal_type}")
            await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ:")
            return
        if goal_type == "gain" and not (target_weight > current_weight):
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å {target_weight} –¥–ª—è —Ü–µ–ª–∏ {goal_type}")
            await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ:")
            return

        context.user_data['editing_target_weight'] = target_weight
        logger.info(f"User {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å {target_weight} –¥–ª—è —Ü–µ–ª–∏ {goal_type}")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–º–ø
        if goal_type == "lose":
            keyboard = [
                [InlineKeyboardButton("–î–æ–ª–≥–æ –∏ –ª–µ–≥–∫–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="set_rate_lose_slow")],
                [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="set_rate_lose_medium")],
                [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 1.0 –∫–≥/–Ω–µ–¥", callback_data="set_rate_lose_fast")]
            ]
        else:  # gain
            keyboard = [
                [InlineKeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="set_rate_gain_slow")],
                [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="set_rate_gain_medium")],
                [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 0.75 –∫–≥/–Ω–µ–¥", callback_data="set_rate_gain_fast")]
            ]

        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        logger.info(f"User {user_id} –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–º–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –¥–ª—è {goal_type}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
async def set_gender_male(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked 'Male' gender button")
    if not user:
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"User {user_id} profile not found when trying to set gender to Male")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], "male", activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], "male", 
            user["activity_level"], new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    
    logger.info(
    f"User {user_id} updated gender to Male; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_gender_female(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked 'Female' gender button")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set gender to Female")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], "female", activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], "female", 
            user["activity_level"], new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    
    logger.info(
    f"User {user_id} updated gender to Female; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML", reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def set_activity_none(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'None'")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'None'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "none")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_activity_low(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'Low'")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'Low'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "low")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_activity_medium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'Medium'")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'Medium'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "medium")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–°—Ä–µ–¥–Ω—è—è", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_activity_high(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'High'")

    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'High'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "high")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–í—ã—Å–æ–∫–∞—è", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML", reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
async def set_goal_maintain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked 'Maintain goal' button")
    
    if not user:
        logger.warning(f"User {user_id} profile not found when selecting 'maintain' goal")
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"Failed to delete message for user {user_id}: {e}")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    daily_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], daily_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"],
             user["activity_level"], daily_calories, goal_type='maintain', target_weight=None, goal_rate=None)
    logger.info(
        f"User {user_id} set goal to 'maintain'; "
        f"daily_calories={daily_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ¬´–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å¬ª!</b>\n\n"
        f"üéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

async def set_goal_lose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} clicked 'Lose weight' goal button")
    
    context.user_data['editing_goal'] = 'lose'
    logger.info(f"User {user_id} entering target weight input for goal 'lose'")
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete message when entering target weight for user {user_id}: {e}")
        pass
    
    await query.message.chat.send_message("–í–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥):", reply_markup=None)

async def set_goal_gain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} clicked 'Gain weight' goal button")

    context.user_data['editing_goal'] = 'gain'
    logger.info(f"User {user_id} entering target weight input for goal 'gain'")
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete message when entering target weight for user {user_id}: {e}")
        pass
    
    await query.message.chat.send_message("–í–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥):", reply_markup=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–∞
async def set_rate_lose_slow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_lose_slow (0.25 kg/week)")
    await set_goal_with_rate(update, context, "lose", 0.25)

async def set_rate_lose_medium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_lose_medium (0.5 kg/week)")
    await set_goal_with_rate(update, context, "lose", 0.5)

async def set_rate_lose_fast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_lose_fast (1.0 kg/week)")
    await set_goal_with_rate(update, context, "lose", 1.0)

async def set_rate_gain_slow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_gain_slow (0.25 kg/week)")
    await set_goal_with_rate(update, context, "gain", 0.25)

async def set_rate_gain_medium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_gain_medium (0.5 kg/week)")
    await set_goal_with_rate(update, context, "gain", 0.5)

async def set_rate_gain_fast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_gain_fast (0.75 kg/week)")
    await set_goal_with_rate(update, context, "gain", 0.75)

async def set_goal_with_rate(update: Update, context: ContextTypes.DEFAULT_TYPE, goal_type: str, kg_per_week: float):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} invoked set_goal_with_rate; goal_type={goal_type}, kg_per_week={kg_per_week}")
    target_weight = context.user_data.get('editing_target_weight')
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    maintenance = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], activity_code)
    daily_adjustment = (kg_per_week * 7700) / 7.0
    daily_calories = round(maintenance - daily_adjustment, 1) if goal_type == "lose" else round(maintenance + daily_adjustment, 1)
    
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], daily_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"],
             user["activity_level"], daily_calories, goal_type=goal_type,
             target_weight=target_weight, goal_rate=f"{kg_per_week}–∫–≥/–Ω–µ–¥")
    
    logger.info(
        f"User {user_id} goal updated: goal_type={goal_type}, kg_per_week={kg_per_week}, "
        f"target_weight={target_weight}, daily_calories={daily_calories}, "
        f"protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    # –í–ê–ñ–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ü–µ–ª–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    logger.info(f"Updating goal start date for user {user_id} during profile edit")
    update_goal_start_date(user_id, datetime.now())
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete message after setting goal rate for user {user_id}: {e}")
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ <b>–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üéØ {('–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å')} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
        f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n"
        f"üéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('editing_goal', None)
    context.user_data.pop('editing_target_weight', None)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã ---
async def add_meal_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started adding a meal (text input)")

    example_text = random.choice(MEAL_EXAMPLES)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    last_msg_id = context.user_data.get('last_meal_message_id')
    if last_msg_id:
        try:
            await update.message.chat.delete_message(last_msg_id)
        except Exception:
            pass

    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_meal")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await update.message.reply_text(
        f"üçú –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏, —á—Ç–æ —Å—ä–µ–ª. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n ¬´<i>{example_text}</i>¬ª",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    context.user_data['last_meal_message_id'] = msg.message_id

    return ADD_MEAL

async def process_food_text(update, context, food_text: str):
    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    last_msg_id = context.user_data.get('last_meal_message_id')
    if last_msg_id:
        try:
            await update.message.chat.delete_message(last_msg_id)
        except Exception:
            pass

    # –°–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"
    processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    context.user_data['last_meal_message_id'] = processing_msg.message_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if len(food_text) > 300:
        await update.message.reply_text(
            "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî –º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_main_menu()
        )
        return ADD_MEAL

    try:
        result = await call_gpt_with_limits(
            update.effective_user.id,
            analyze_food_with_gpt,
            food_text,
            YANDEX_GPT_API_KEY,
            YANDEX_GPT_FOLDER_ID
        )
    except RateLimitExceeded as e:
        await update.message.reply_text(
            f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.",
            reply_markup=get_main_menu()
        )
        return ADD_MEAL
    except Exception as e:
        logger.error(f"GPT error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    items = result.get("items", [])
    totals = result.get("total", {})
    totals_clean = {
        "calories": totals.get("calories") or 0,
        "protein": totals.get("protein") or 0,
        "fat": totals.get("fat") or 0,
        "carbs": totals.get("carbs") or 0
    }

    context.user_data['pending_meal'] = {
        'food_text': food_text,
        'calories': totals_clean["calories"],
        'protein': totals_clean["protein"],
        'fat': totals_clean["fat"],
        'carbs': totals_clean["carbs"],
        'items': items
    }

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"
    try:
        await processing_msg.delete()
    except Exception:
        pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    stats_data = get_stats(user_id)
    daily_norm = get_user(user_id)["daily_calories"]
    already_eaten = stats_data['day']['calories'] or 0
    projected = already_eaten + totals_clean['calories']
    progress_after = render_progress_bar(projected, daily_norm)

    warning_text = ""
    if daily_norm > 0 and projected > daily_norm:
        excess = projected - daily_norm
        warning_text = f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –Ω–∞ <b>{excess:.0f} –∫–∫–∞–ª</b>!\n"

    product_list = "\n".join(
        [f"‚ñ∏ {i['product']} - {i['quantity']} - {i.get('calories') or 0} –∫–∫–∞–ª, "
         f"(–ë: {i.get('protein') or 0}–≥, –ñ: {i.get('fat') or 0}–≥, –£: {i.get('carbs') or 0}–≥)" for i in items]
    )

    summary = f"""
<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>

{product_list}

<b>‚ö°Ô∏è –ò—Ç–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π:</b> {totals_clean['calories']} –∫–∫–∞–ª  

ü•©–ë: {totals_clean['protein']} –≥, ü•ë–ñ: {totals_clean['fat']} –≥, üçû–£: {totals_clean['carbs']} –≥

<b>üìä –ù–æ—Ä–º–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>
{progress_after}
{warning_text}
    """

    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–≤–æ–¥", callback_data="confirm_meal"), InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä", callback_data="retry_meal"), InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_meal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await update.message.reply_text(summary.strip(), reply_markup=reply_markup, parse_mode="HTML")
    context.user_data['last_meal_message_id'] = msg.message_id

    return AWAIT_CONFIRM

async def add_food_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    voice = update.message.voice
    user_id = update.effective_user.id
    logger.info(f"User {user_id} sent a voice message for meal input")

    if not voice:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return ADD_MEAL
    if voice.duration > 20:
        await update.message.reply_text("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥). –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—á–µ.")
        return ADD_MEAL

    file = await context.bot.get_file(voice.file_id)
    file_path = f"voice_{user.id}.ogg"
    await file.download_to_drive(file_path)

    try:
        # üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        text = stt.recognize(file_path)
        logger.info(f"User {user_id} voice STT result: {text}")

        # üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        return await process_food_text(update, context, text)

    except Exception as e:
        logger.error(f"User {user_id} voice processing error: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        return ADD_MEAL

    finally:
        if os.path.exists(file_path):
            os.remove(file_path)



async def handle_food_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    food_text = update.message.text
    return await process_food_text(update, context, food_text)


async def confirm_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pending = context.user_data.get('pending_meal')
    if not pending:
        await query.message.reply_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    add_meal(
        update.effective_user.id,
        pending['food_text'],
        pending['calories'],
        pending['protein'],
        pending['fat'],
        pending['carbs']
    )

    user_id = update.effective_user.id
    logger.info(
    f"User {user_id} confirmed meal: {pending['calories']} kcal, "
    f"protein={pending['protein']}, fat={pending['fat']}, carbs={pending['carbs']}"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –µ–¥—ã + –∫–Ω–æ–ø–∫–∞–º–∏
    last_message_id = context.user_data.get('last_meal_message_id')
    if last_message_id:
        try:
            await query.message.chat.delete_message(last_message_id)
        except Exception as e:
            logger.warning(f"User {user_id} failed to delete old meal message: {e}")
        context.user_data.pop('last_meal_message_id', None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await query.message.chat.send_message(
        f"üçú –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
        f"‚ö°Ô∏è–ö: {pending['calories']}, ü•©–ë: {pending['protein']} –≥, ü•ë–ñ: {pending['fat']} –≥, üçû–£: {pending['carbs']} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END



async def retry_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    example_text = random.choice(MEAL_EXAMPLES)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    await query.answer()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} chose to retry meal input")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –µ–¥—ã + –∫–Ω–æ–ø–∫–∞–º–∏
    last_message_id = context.user_data.get('last_meal_message_id')
    if last_message_id:
        try:
            await query.message.chat.delete_message(last_message_id)
        except Exception as e:
            logger.warning(f"User {user_id} failed to delete old meal message: {e}")
        context.user_data.pop('last_meal_message_id', None)

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –µ–¥—É –∑–∞–Ω–æ–≤–æ
    await query.message.chat.send_message(f"üçú –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏, —á—Ç–æ —Å—ä–µ–ª. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n ¬´<i>{example_text}</i>¬ª", parse_mode="HTML", reply_markup=None)
    return ADD_MEAL


# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} requested stats")
    

    if not user:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. /start", reply_markup=None)
        return

    daily_norm = user["daily_calories"] or 0
    protein_norm = user["protein_norm"] or 0
    fat_norm = user["fat_norm"] or 0
    carbs_norm = user["carbs_norm"] or 0

    stats_data = get_stats(user_id)
    progress_today_k = render_progress_bar(stats_data['day']['calories'], daily_norm)
    progress_today_p = render_progress_bar(stats_data['day']['protein'], protein_norm)
    progress_today_f = render_progress_bar(stats_data['day']['fat'], fat_norm)
    progress_today_c = render_progress_bar(stats_data['day']['carbs'], carbs_norm)

    day_stats = stats_data.get('day', {})

    day_calories = day_stats.get('calories') or 0

    img_buffer = None
    try:
        img_buffer = await create_monthly_chart(user_id)
    except Exception as e:
        logger.error(f"Error generating monthly chart for user {user_id}: {e}")
        img_buffer = None

    warning_text_today = ""
    if daily_norm > 0 and day_calories > daily_norm:
        excess_today = day_calories - daily_norm
        warning_text_today = f"‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç–µ –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –Ω–∞ {excess_today:.0f} –∫–∫–∞–ª"
        logger.warning(f"User {user_id} exceeded daily calories by {excess_today} kcal")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ü–µ–ª—å
    goal_info = get_user_goal_info(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–ø–∏—Å–æ–∫ –±–ª—é–¥ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="last_7_days")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –µ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="clear_today")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ü–µ–ª–µ–π –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if goal_info:
        keyboard.append([InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏", callback_data="current_progress")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    caption_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>:\n\n"
        f"‚ö°Ô∏è–ö–∞–ª–æ—Ä–∏–π:\n{progress_today_k}\n\n"
        f"ü•©–ë–µ–ª–∫–æ–≤:\n{progress_today_p}\n\n"
        f"ü•ë–ñ–∏—Ä–æ–≤:\n{progress_today_f}\n\n"
        f"üçû–£–≥–ª–µ–≤–æ–¥–æ–≤:\n{progress_today_c}\n\n"
        f"{warning_text_today}"
        )

    if img_buffer:
        await update.message.reply_photo(
            photo=img_buffer,
            caption=caption_text,
            parse_mode="HTML",
            reply_markup=reply_markup
            )
    else:
        await update.message.reply_text(
            text=caption_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

async def show_last_7_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id
        meals = get_meals_last_7_days(user_id)
        logger.info(f"User {user_id} requested last 7 days menu")

        if not meals:
            logger.info(f"User {user_id} has no meals for last 7 days")
            await query.message.reply_text(
                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", 
                reply_markup=get_main_menu()
            )
            return

        daily_meals = defaultdict(list)
        total_per_day = defaultdict(float)

        for meal in meals:
            date_str = meal['timestamp'].split()[0]
            date_friendly = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m")
            daily_meals[date_friendly].append(f"üîπ {meal['food_text']} ‚Äî {meal['calories']} –∫–∫–∞–ª")
            total_per_day[date_friendly] += meal['calories']

        message = "üóì <b>–ú–µ–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>:\n\n"
        for date, items in daily_meals.items():
            total = total_per_day[date]
            message += f"üìå<u><b>{date}</b> (–≤—Å–µ–≥–æ: {total} –∫–∫–∞–ª)</u>\n"
            message += "\n".join(items)
            message += "\n\n"

        await query.message.reply_text(message, parse_mode="HTML", reply_markup=get_main_menu())

    except Exception as e:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        logger.exception(f"Error in show_last_7_days for user {user_id}: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.",
                reply_markup=get_main_menu()
            )

async def clear_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()

    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    deleted = delete_meals_for_day(user_id)

    if deleted:
        logger.info(f"User {user_id} cleared today's meals")
        await query.message.reply_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_menu())
    else:
        logger.info(f"User {user_id} tried to clear meals but none were added today")
        await query.message.reply_text(f"‚ö†Ô∏è –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏.", reply_markup=get_main_menu())

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Fallback handler triggered for user {user_id}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
    if 'editing_field' in context.user_data or 'editing_goal' in context.user_data:
        logger.info(f"User {user_id} is editing profile/goal, skipping fallback")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç."
    )


# –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 

async def show_goal_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested goal chart")
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    goal_info = get_user_goal_info(user_id)
    
    if not goal_info:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.", reply_markup=get_main_menu())
        return
    
    try:
        from bot.charts import create_goal_progress_chart
        from bot.database import get_goal_start_date
        
        start_date = get_goal_start_date(user_id)
        img_buffer, goal_date = await create_goal_progress_chart(
            user_id, 
            goal_info['current_weight'], 
            goal_info['target_weight'], 
            goal_info['goal_type'], 
            goal_info['goal_rate'],
            start_date
        )
        
        goal_date_str = goal_date.strftime("%d.%m.%Y")
        
        await query.message.reply_photo(
            photo=img_buffer,
            caption=f"üìâ –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏\n\n"
                   f"–¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_info['goal_type']=='lose' else '–ù–∞–±—Ä–∞—Ç—å'}\n"
                   f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {goal_info['current_weight']} –∫–≥\n"
                   f"–¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {goal_info['target_weight']} –∫–≥\n"
                   f"–¢–µ–º–ø: {goal_info['goal_rate']}\n"
                   f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {goal_date_str}",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error generating for user {user_id}: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )


async def show_current_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested current progress chart")
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    goal_info = get_user_goal_info(user_id)
    
    if not goal_info:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.", reply_markup=get_main_menu())
        return
    
    try:
        from bot.charts import create_current_progress_chart
        from bot.database import get_goal_start_date
        
        start_date = get_goal_start_date(user_id)
        img_buffer, goal_date = await create_current_progress_chart(
            user_id, 
            goal_info['current_weight'], 
            goal_info['target_weight'], 
            goal_info['goal_type'], 
            goal_info['goal_rate'],
            start_date
        )
        goal_date_str = goal_date.strftime("%d.%m.%Y")
        
        await query.message.reply_photo(
            photo=img_buffer,
            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏\n\n"
                   f"–¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_info['goal_type']=='lose' else '–ù–∞–±—Ä–∞—Ç—å'}\n"
                   f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {goal_info['current_weight']} –∫–≥\n"
                   f"–¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {goal_info['target_weight']} –∫–≥\n"
                   f"–¢–µ–º–ø: {goal_info['goal_rate']}\n"
                   f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {goal_date_str}",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error generating for user {user_id}: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

async def goal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    goal = query.data.replace("goal_", "")  # 'lose' | 'gain' | 'maintain'
    context.user_data['goal'] = goal
    user_id = update.effective_user.id
    logger.info(f"User {user_id} selected goal: {goal}")

    user_id = update.effective_user.id
    name = context.user_data.get('name')
    weight = context.user_data.get('weight')
    height = context.user_data.get('height')
    age = context.user_data.get('age')
    gender = context.user_data.get('gender')
    activity_code = context.user_data.get('activity_code')
    activity_label = ACTIVITY_LABELS.get(activity_code, activity_code)

    # –ï—Å–ª–∏ —Ü–µ–ª—å - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É (–∫–∞–∫ —Ä–∞–Ω—å—à–µ), —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–æ—Ä–º—ã
    if goal == "maintain":
        try:
            daily_calories = calculate_daily_calories(weight, height, age, gender, activity_code)
            protein_norm, fat_norm, carbs_norm = calculate_macros(weight, daily_calories)
            add_user(user_id, name, weight, height, age, gender, activity_label, daily_calories,
                     goal_type='maintain', target_weight=None, goal_rate=None)

            await query.message.reply_text(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
                f"üéØ –¢–≤–æ—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):\n"
                f"<b>{daily_calories} –∫–∫–∞–ª</b>\n"
                f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error calculating daily calories for user {user_id}: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π /start –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

    # –ï—Å–ª–∏ —Ü–µ–ª—å –ø–æ—Ö—É–¥–µ—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å
    await query.message.reply_text("–í–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä 70.0):", reply_markup=None)
    return TARGET_WEIGHT

async def target_weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    logger.info(f"User {user_id} entered target weight: {text}")
    try:
        target = float(text)
        if target <= 0:
            raise ValueError
    except ValueError:
        logger.warning(f"User {user_id} entered invalid target weight: {text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.0):")
        return TARGET_WEIGHT

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    goal = context.user_data.get('goal')
    current_weight = context.user_data.get('weight')
    if goal == "lose" and not (target < current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:")
        return TARGET_WEIGHT
    if goal == "gain" and not (target > current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:")
        return TARGET_WEIGHT

    context.user_data['target_weight'] = target

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–≥/–Ω–µ–¥)
    if goal == "lose":
        keyboard = [
            [InlineKeyboardButton("–î–æ–ª–≥–æ –∏ –ª–µ–≥–∫–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ (—Å–ª–æ–∂–Ω–æ) ‚Äî 1.0 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_fast")]
        ]
    else:  # gain
        keyboard = [
            [InlineKeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 0.75 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_fast")]
        ]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å):", reply_markup=InlineKeyboardMarkup(keyboard))
    return GOAL_RATE

async def goal_rate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()
    data = query.data  # e.g. rate_lose_medium
    parts = data.split("_")
    
    if len(parts) < 3:
        await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â—ë —Ä–∞–∑.", reply_markup=get_main_menu())
        return ConversationHandler.END

    goal_type = parts[1]
    rate_key = parts[2]

    # kg/week mapping
    mapping = {
        "lose": {"slow": 0.25, "medium": 0.5, "fast": 1.0},
        "gain": {"slow": 0.25, "medium": 0.5, "fast": 0.75}
    }
    kg_per_week = mapping.get(goal_type, {}).get(rate_key, 0.5)
    rate_label = f"{rate_key}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    name = context.user_data.get('name')
    weight = context.user_data.get('weight')
    height = context.user_data.get('height')
    age = context.user_data.get('age')
    gender = context.user_data.get('gender')
    activity_code = context.user_data.get('activity_code')
    activity_label = context.user_data.get('activity_level')
    target_weight = context.user_data.get('target_weight')

    logger.info(f"User {user_id} selected goal rate: {kg_per_week} kg/week for goal {goal_type}")

    if None in (name, weight, height, age, gender, activity_code):
        await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ /start", reply_markup=get_main_menu())
        return ConversationHandler.END

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–ª–∏
    maintenance = calculate_daily_calories(weight, height, age, gender, activity_code)
    daily_adjustment = (kg_per_week * 7700) / 7.0  # 7700 –∫–∫–∞–ª ~ 1 –∫–≥
    if goal_type == "lose":
        daily_calories = round(maintenance - daily_adjustment, 1)
    else:  # gain
        daily_calories = round(maintenance + daily_adjustment, 1)
    logger.info(f"Calculated daily calories for user {user_id}: {daily_calories} kcal")

    # –ú–∏–Ω–∏–º—É–º –∫–∫–∞–ª (–∑–∞—â–∏—Ç–∞) ‚Äî –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
    min_cal = 1200 if gender == "female" else 1500
    if daily_calories < min_cal:
        await query.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–º–ø –¥–∞—ë—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫—É—é –Ω–æ—Ä–º—É ({daily_calories} –∫–∫–∞–ª). –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —â–∞–¥—è—â–∏–π —Ç–µ–º–ø."
        )
        return GOAL_RATE

    # –§–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ë–ñ–£ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    if goal_type == "lose":
        protein_factor = 2.0
        fat_factor = 1.0
    elif goal_type == "gain":
        protein_factor = 1.6
        fat_factor = 1.0
    else:
        protein_factor = 1.8
        fat_factor = 1.0

    protein_norm, fat_norm, carbs_norm = calculate_macros(weight, daily_calories, protein_factor=protein_factor, fat_factor=fat_factor)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ goal
    add_user(user_id, name, weight, height, age, gender, activity_label, daily_calories,
             goal_type=goal_type, target_weight=target_weight, goal_rate=f"{kg_per_week}–∫–≥/–Ω–µ–¥")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ü–µ–ª–∏ - –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
    logger.info(f"Setting goal start date for user {user_id}")
    update_goal_start_date(user_id, datetime.now())

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–∏
    try:
        from bot.charts import create_goal_progress_chart
        img_buffer, goal_date = await create_goal_progress_chart(
            user_id, weight, target_weight, goal_type, f"{kg_per_week}–∫–≥/–Ω–µ–¥"
        )
        
        goal_date_str = goal_date.strftime("%d.%m.%Y")
        
        await query.message.reply_photo(
            photo=img_buffer,
            caption=f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
                   f"üéØ –¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
                   f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n"
                   f"üéØ –î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {goal_date_str}\n\n"
                   f"üéØ –ù–æ—Ä–º–∞ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏: <b>{daily_calories} –∫–∫–∞–ª</b>\n"
                   f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logger.error(f"Error generating goal chart for user {user_id}: {e}")
        await query.message.reply_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üéØ –¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
            f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n\n"
            f"üéØ –ù–æ—Ä–º–∞ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏: <b>{daily_calories} –∫–∫–∞–ª</b>\n"
            f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥" + disclaimer_text,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
    
    return ConversationHandler.END

async def settings_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    status = get_notifications_status(user_id)
    logger.info(f"Open setting menu {user_id}")

    notif_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: [–í–∫–ª—é—á–µ–Ω—ã]" if status else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: [–í—ã–∫–ª—é—á–µ–Ω—ã]"

    keyboard = [
        [InlineKeyboardButton(notif_text, callback_data="toggle_notifications")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:  # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –∫–Ω–æ–ø–∫–∏
        await update.callback_query.edit_message_text(
            "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.", reply_markup=reply_markup
        )
    else:  # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /settings
        await update.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.", reply_markup=reply_markup)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤
async def toggle_notifications(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    current_status = get_notifications_status(user_id)
    new_status = not current_status

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    set_notifications(user_id, new_status)
    logger.info(f"Edit settings notification {user_id}: {new_status}")

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    status_text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if new_status else "üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã"
    await query.answer()
    await query.edit_message_text(
        text=f"{status_text}\n\n–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="toggle_notifications")]
        ])
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é

async def start_generate_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ ‚Äî —Ç–æ—Ç –∂–µ UI, —Ç–æ—Ç –∂–µ flow
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started menu generation (start_generate_menu)")

    keyboard = [[InlineKeyboardButton(str(i), callback_data=f"meals_{i}") for i in range(1, 6)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ –º–µ–Ω—é?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=reply_markup
    )
    return CHOOSING_MEALS


async def choose_meals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id
    logger.info(f"User {user_id} selected meals callback: {data}")

    if not data.startswith("meals_"):
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –∑–∞–Ω–æ–≤–æ.")
        return CHOOSING_MEALS

    try:
        meals_per_day = int(data.split("_")[1])
    except Exception:
        meals_per_day = 3
    context.user_data["meals_per_day"] = meals_per_day

    examples_menu = random.choice(MENU_EXAMPLES)

    text = (
        f"‚òùÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n¬´<i>{examples_menu}</i>¬ª" + disclaimer_text
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π"
    keyboard = [[InlineKeyboardButton("–ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π", callback_data="no_prefs")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="HTML")
    return TYPING_PREFS


async def typing_prefs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:  # –ø—Ä–∏—à–µ–ª callback –æ—Ç –∫–Ω–æ–ø–∫–∏
        prefs = "–ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π"
        await update.callback_query.answer()
    else:
        prefs = (update.message.text or "").strip()

    user_id = update.effective_user.id
    logger.info(f"User {user_id} entered preferences (typing_prefs): {prefs[:200]}")

    if len(prefs) > 100:
        await update.effective_message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return TYPING_PREFS

    context.user_data["prefs"] = prefs

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    user_data = get_user(user_id)
    if not user_data:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ –ö–ë–ñ–£ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.")
        logger.warning(f"User {user_id} has no profile data")
        return ConversationHandler.END

    goal = user_data.get("goal_type", "maintain")
    daily_calories = user_data.get("daily_calories", 0)
    protein = user_data.get("protein_norm", 0)
    fat = user_data.get("fat_norm", 0)
    carbs = user_data.get("carbs_norm", 0)
    meals_per_day = context.user_data.get("meals_per_day", 3)
    prefs_and_restrictions = context.user_data.get("prefs", "")

    api_key = YANDEX_GPT_API_KEY
    folder_id = YANDEX_GPT_FOLDER_ID

    try:
        check_menu_rate_limit(user_id)

        await update.effective_message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é ‚Äî —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        logger.info(f"User {user_id}: sending GPT request (goal={goal}, meals_per_day={meals_per_day})")

        menu_data = await analyze_menu_with_gpt(
            user_goal=goal,
            daily_calories=daily_calories,
            protein_norm=protein,
            fat_norm=fat,
            carbs_norm=carbs,
            meals_per_day=meals_per_day,
            prefs_and_restrictions=prefs_and_restrictions,
            api_key=api_key,
            folder_id=folder_id
        )
        logger.info(f"User {user_id}: GPT menu received successfully")

        update_menu_request_time(user_id)

        image_path = render_menu_to_image(menu_data, user_id)
        logger.info(f"User {user_id}: menu image rendered at {image_path}")
        
        today_tag = f"\n\n#–ú–µ–Ω—é_–∑–∞_{datetime.now():%Y%m%d}"

        with open(image_path, "rb") as img:
            await update.effective_message.reply_photo(img, caption=disclaimer_text + today_tag)
        logger.info(f"User {user_id}: menu image sent")

    except RateLimitExceededMenu as e:
        await update.effective_message.reply_text(
            f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ –º–µ–Ω—é ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after // 3600}—á {(e.retry_after % 3600)//60}–º.",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logger.exception(f"User {user_id}: error generating menu - {e}")
        await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: {e}")

    return ConversationHandler.END


# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# ---- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ----
async def _safe_delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, why: str = ""):
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.debug(f"Deleted message {message_id} in chat {chat_id}. {why}")
    except Exception as e:
        logger.debug(f"Can't delete message {message_id} in chat {chat_id}: {e}. {why}")

def _store_last_msg_id(context: ContextTypes.DEFAULT_TYPE, msg):
    if not msg:
        return
    context.user_data['last_reminder_message_id'] = msg.message_id
    context.user_data['last_reminder_chat_id'] = msg.chat_id
    logger.debug(f"Stored last_reminder_message_id={msg.message_id} chat={msg.chat_id}")

async def _delete_last_bot_msg_if_any(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_id = context.user_data.get('last_reminder_message_id')
    chat_id = context.user_data.get('last_reminder_chat_id') or (update.effective_chat.id if update.effective_chat else None)
    if last_id and chat_id:
        await _safe_delete_message(context, chat_id, last_id, why="cleanup before next prompt")
    context.user_data.pop('last_reminder_message_id', None)
    context.user_data.pop('last_reminder_chat_id', None)

# ---- –•–µ–Ω–¥–ª–µ—Ä—ã ----

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ callback 'meal_reminders')
async def meal_reminders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    logger.info(f"User {user_id} opened meal reminders menu")

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å)
    try:
        await _delete_last_bot_msg_if_any(update, context)
    except Exception as e:
        logger.debug(f"Failed to cleanup last reminder message: {e}")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT notifications_enabled FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row or row[0] == 0:
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã
        text = (
            "üîï –£ –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –≤–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        )
        sent = await query.message.reply_text(text)
        _store_last_msg_id(context, sent)
        logger.info(f"User {user_id} tried to open reminders menu but notifications disabled")
        return

    # –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    reminders = get_meal_reminders(user_id)
    if not reminders:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏."
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_reminders")]]
    else:
        text = "<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
        for r in reminders:
            text += f"üîπ {r['name']} ‚Äî {r['time']} –ø–æ –ú–°–ö\n"
        keyboard = [[InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_reminders")]]

    sent = await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    _store_last_msg_id(context, sent)
    logger.info(f"User {user_id} reminder menu sent (count={len(reminders)})")


# –®–∞–≥ 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å" -> –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def add_reminders_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    logger.info(f"User {user_id} clicked add_reminders")

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await _delete_last_bot_msg_if_any(update, context)
    except Exception as e:
        logger.debug(f"Failed cleanup before add_reminders_start: {e}")

    keyboard = [
        [InlineKeyboardButton("1", callback_data="reminders_count_1")],
        [InlineKeyboardButton("2", callback_data="reminders_count_2")],
        [InlineKeyboardButton("3", callback_data="reminders_count_3")],
    ]
    sent = await query.message.reply_text("–°–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏ –≤ –¥–µ–Ω—å –≤–∞–º –Ω—É–∂–Ω–æ?", reply_markup=InlineKeyboardMarkup(keyboard))
    _store_last_msg_id(context, sent)
    logger.info(f"User {user_id} asked for reminders count selection")
    return SET_REMINDER_COUNT


# –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (callback)
async def set_reminders_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # parse count (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –≤ callback_data)
    try:
        count = int(query.data.split("_")[-1])
    except Exception:
        count = 1
    context.user_data['reminder_count'] = count
    context.user_data['current_meal_index'] = 1
    logger.info(f"User {user_id} selected reminder_count={count}")

    # –æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–¥–∞–ª–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    try:
        clear_meal_reminders(user_id)
        logger.debug(f"Cleared existing reminders for user {user_id}")
    except Exception as e:
        logger.error(f"Error clearing reminders for user {user_id}: {e}")

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        await query.message.delete()
    except Exception as e:
        logger.debug(f"Can't delete count-selection message: {e}")

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞
    chat_id = query.from_user.id
    sent = await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ ‚Ññ1 (–º–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤):")
    _store_last_msg_id(context, sent)
    logger.info(f"User {user_id} prompted to enter name for meal #1")
    return SET_MEAL_NAME


# –®–∞–≥ 3: –≤–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ (Message)
async def set_meal_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = (update.message.text or "").strip()[:15]
    if not text:
        logger.info(f"User {user_id} submitted empty meal name")
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤):")
        return SET_MEAL_NAME

    context.user_data.setdefault('meal_names', []).append(text)
    logger.info(f"User {user_id} entered meal name #{len(context.user_data['meal_names'])}: '{text}'")

    # —É–¥–∞–ª—è–µ–º –±–æ—Ç-–ø—Ä–æ—à–ª—ã–π prompt –∏ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å —á–∞—Ç
    try:
        await _delete_last_bot_msg_if_any(update, context)
    except Exception as e:
        logger.debug(f"Failed to delete last bot message after name input: {e}")
    try:
        await update.message.delete()
    except Exception as e:
        logger.debug(f"Failed to delete user's name message: {e}")

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞
    chat_id = update.effective_chat.id
    sent = await context.bot.send_message(chat_id=chat_id, text=f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è '{text}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –ø–æ –ú–°–ö:")
    _store_last_msg_id(context, sent)
    logger.info(f"User {user_id} prompted to enter time for meal '{text}'")
    return SET_MEAL_TIME


# –®–∞–≥ 4: –≤–≤–æ–¥–∏–º –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ (Message)
async def set_meal_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    time_text = (update.message.text or "").strip()
    logger.info(f"User {user_id} entered time text: {time_text}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    try:
        datetime.strptime(time_text, "%H:%M")
    except ValueError:
        logger.info(f"User {user_id} provided invalid time format: {time_text}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú –ø–æ –ú–°–ö:")
        return SET_MEAL_TIME

    idx = context.user_data.get('current_meal_index', 1)
    name = context.user_data.get('meal_names', [])[idx - 1]
    try:
        add_meal_reminder(user_id, idx, name, time_text)
        logger.info(f"Saved reminder for user {user_id}: #{idx} '{name}' @ {time_text}")
    except Exception as e:
        logger.error(f"Error saving reminder for user {user_id}: {e}")

    # —É–¥–∞–ª—è–µ–º –±–æ—Ç-–ø—Ä–æ—à–ª—ã–π prompt –∏ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    try:
        await _delete_last_bot_msg_if_any(update, context)
    except Exception as e:
        logger.debug(f"Failed to delete last bot message after time input: {e}")
    try:
        await update.message.delete()
    except Exception as e:
        logger.debug(f"Failed to delete user's time message: {e}")

    # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–∏–±–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π name, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
    if context.user_data.get('current_meal_index', 1) < context.user_data.get('reminder_count', 1):
        context.user_data['current_meal_index'] += 1
        nxt = context.user_data['current_meal_index']
        chat_id = update.effective_chat.id
        sent = await context.bot.send_message(chat_id=chat_id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ ‚Ññ{nxt} (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):")
        _store_last_msg_id(context, sent)
        logger.info(f"User {user_id} prompted to enter name for meal #{nxt}")
        return SET_MEAL_NAME
    else:
        # –≤—Å–µ –≤–≤–µ–¥–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        reminders = get_meal_reminders(user_id)
        text = "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b>\n\n"
        for r in reminders:
            text += f"üîπ {r['name']} ‚Äî {r['time']} –ø–æ –ú–°–ö\n"

        chat_id = update.effective_chat.id
        sent = await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
        _store_last_msg_id(context, sent)
        logger.info(f"User {user_id} finished reminders setup (count={len(reminders)})")

        # —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('meal_names', None)
        context.user_data.pop('current_meal_index', None)
        context.user_data.pop('reminder_count', None)
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã fallback

async def cancel_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        msg = update.callback_query.message
    else:
        msg = update.message

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    last_msg_id = context.user_data.get('last_meal_message_id')
    if last_msg_id:
        try:
            await msg.chat.delete_message(last_msg_id)
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await msg.reply_text("‚úñÔ∏è –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=get_main_menu())

    # –ß–∏—Å—Ç–∏–º user_data
    context.user_data.pop('last_meal_message_id', None)
    context.user_data.pop('pending_meal', None)

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
async def cancel_generate_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
    context.user_data.clear()
    await (update.message or query.message).reply_text("‚úñÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (callback –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π)
async def cancel_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ –∫–æ–ª–±—ç–∫ ‚Äî –æ—Ç–≤–µ—Ç–∏–º –∏ —É–¥–∞–ª–∏–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —É–¥–∞–ª–∏–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.callback_query:
        await update.callback_query.answer()
        chat = update.callback_query.message.chat
        user_id = update.callback_query.from_user.id
        logger.info(f"User {user_id} cancelled reminders (callback)")
    else:
        chat = update.effective_chat
        user_id = update.effective_user.id
        logger.info(f"User {user_id} cancelled reminders (message)")

    # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–æ—Ç-–ø–æ—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        await _delete_last_bot_msg_if_any(update, context)
    except Exception as e:
        logger.debug(f"Failed to cleanup messages on cancel: {e}")

    try:
        await context.bot.send_message(chat_id=chat.id, text="‚úñÔ∏è –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=None)
    except Exception as e:
        logger.debug(f"Failed send cancel ack: {e}")

    # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.pop('meal_names', None)
    context.user_data.pop('current_meal_index', None)
    context.user_data.pop('reminder_count', None)
    context.user_data.pop('last_reminder_message_id', None)
    context.user_data.pop('last_reminder_chat_id', None)

    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
profile_handler = MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), profile)
stats_handler = MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats)
settings_handler = MessageHandler(filters.Regex("^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), settings_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

meal_reminders_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(meal_reminders_menu, pattern="^meal_reminders$"),
        CallbackQueryHandler(add_reminders_start, pattern="^add_reminders$")
    ],
    states={
        SET_REMINDER_COUNT: [
            CallbackQueryHandler(set_reminders_count, pattern="^reminders_count_[1-3]$"),
            # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            CallbackQueryHandler(cancel_reminders, pattern=".*")
        ],
        SET_MEAL_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_meal_name),
            CallbackQueryHandler(cancel_reminders, pattern=".*")
        ],
        SET_MEAL_TIME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_meal_time),
            CallbackQueryHandler(cancel_reminders, pattern=".*")
        ],
    },
    fallbacks=[
        CommandHandler('cancel', cancel_reminders),
        CallbackQueryHandler(cancel_reminders, pattern="^cancel_reminders$"),
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ –ª—é–±–æ–π —á—É–∂–æ–π –∫–Ω–æ–ø–∫–µ
        CallbackQueryHandler(cancel_reminders, pattern=".*")
    ],
    per_user=True,
    per_chat=True
)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é

generate_menu_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é$"), start_generate_menu)],
    states={
        CHOOSING_MEALS: [
            CallbackQueryHandler(choose_meals),
            # –ï—Å–ª–∏ –∂–º—É—Ç —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            CallbackQueryHandler(cancel_generate_menu, pattern=".*")
        ],
        TYPING_PREFS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, typing_prefs),
            CallbackQueryHandler(typing_prefs, pattern="^no_prefs$"),
            # –õ–æ–≤–∏–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
            CallbackQueryHandler(cancel_generate_menu, pattern=".*")
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_generate_menu),
    ],
    per_user=True,
    per_chat=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –µ–¥—ã

meal_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üçú –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É$"), add_meal_start)],
    states={
        ADD_MEAL: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_food_input),
            MessageHandler(filters.VOICE, add_food_voice),
            CallbackQueryHandler(cancel_meal, pattern="^cancel_meal$"),
            # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            CallbackQueryHandler(cancel_meal, pattern=".*"),
        ],
        AWAIT_CONFIRM: [
            CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$"),
            CallbackQueryHandler(retry_meal, pattern="^retry_meal$"),
            CallbackQueryHandler(cancel_meal, pattern="^cancel_meal$"),
            # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            CallbackQueryHandler(cancel_meal, pattern=".*"),
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel_meal)],
    per_user=True,
)


# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∑–∞–º–µ–Ω—è—é—Ç —Å—Ç–∞—Ä—ã–µ ConversationHandler'—ã) ---
edit_profile_handler = CallbackQueryHandler(edit_profile_start, pattern="edit_profile")
edit_name_handler = CallbackQueryHandler(edit_name_callback, pattern="edit_name")
edit_weight_handler = CallbackQueryHandler(edit_weight_callback, pattern="edit_weight")
edit_height_handler = CallbackQueryHandler(edit_height_callback, pattern="edit_height")
edit_age_handler = CallbackQueryHandler(edit_age_callback, pattern="edit_age")
edit_gender_handler = CallbackQueryHandler(edit_gender_callback, pattern="edit_gender")
edit_activity_handler = CallbackQueryHandler(edit_activity_callback, pattern="edit_activity")
edit_goal_handler = CallbackQueryHandler(edit_goal_callback, pattern="edit_goal")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
set_gender_male_handler = CallbackQueryHandler(set_gender_male, pattern="set_gender_male")
set_gender_female_handler = CallbackQueryHandler(set_gender_female, pattern="set_gender_female")
set_activity_none_handler = CallbackQueryHandler(set_activity_none, pattern="set_activity_none")
set_activity_low_handler = CallbackQueryHandler(set_activity_low, pattern="set_activity_low")
set_activity_medium_handler = CallbackQueryHandler(set_activity_medium, pattern="set_activity_medium")
set_activity_high_handler = CallbackQueryHandler(set_activity_high, pattern="set_activity_high")
set_goal_maintain_handler = CallbackQueryHandler(set_goal_maintain, pattern="set_goal_maintain")
set_goal_lose_handler = CallbackQueryHandler(set_goal_lose, pattern="set_goal_lose")
set_goal_gain_handler = CallbackQueryHandler(set_goal_gain, pattern="set_goal_gain")
set_rate_lose_slow_handler = CallbackQueryHandler(set_rate_lose_slow, pattern="set_rate_lose_slow")
set_rate_lose_medium_handler = CallbackQueryHandler(set_rate_lose_medium, pattern="set_rate_lose_medium")
set_rate_lose_fast_handler = CallbackQueryHandler(set_rate_lose_fast, pattern="set_rate_lose_fast")
set_rate_gain_slow_handler = CallbackQueryHandler(set_rate_gain_slow, pattern="set_rate_gain_slow")
set_rate_gain_medium_handler = CallbackQueryHandler(set_rate_gain_medium, pattern="set_rate_gain_medium")
set_rate_gain_fast_handler = CallbackQueryHandler(set_rate_gain_fast, pattern="set_rate_gain_fast")


conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight_handler)],
        HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height_handler)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
        GENDER: [CallbackQueryHandler(gender_handler)],
        ACTIVITY: [CallbackQueryHandler(activity_handler)],
        GOAL: [CallbackQueryHandler(goal_handler, pattern="^goal_")],
        TARGET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, target_weight_handler)],
        GOAL_RATE: [CallbackQueryHandler(goal_rate_handler, pattern="^rate_")]
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_user=True
)

# –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
confirm_handler = CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$")
clear_today_handler = CallbackQueryHandler(clear_today, pattern="^clear_today$")
retry_handler = CallbackQueryHandler(retry_meal, pattern="^retry_meal$")
last_7_days_handler = CallbackQueryHandler(show_last_7_days, pattern="^last_7_days$")
goal_callback_handler = CallbackQueryHandler(goal_handler, pattern="^goal_")
goal_rate_callback_handler = CallbackQueryHandler(goal_rate_handler, pattern="^rate_")
voice_message_handler = MessageHandler(filters.VOICE, add_food_voice)
toggle_notifications_handler = CallbackQueryHandler(toggle_notifications, pattern="toggle_notifications")
