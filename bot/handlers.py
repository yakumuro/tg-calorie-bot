from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from bot.database import add_user, get_user, add_meal, get_stats, get_meals_last_7_days
from bot.utils import calculate_daily_calories, get_main_menu
from bot.yandex_gpt import analyze_food_with_gpt
from config.config import YANDEX_GPT_API_KEY, YANDEX_GPT_FOLDER_ID
import logging
from datetime import datetime
from collections import defaultdict

logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
NAME, WEIGHT, HEIGHT, AGE, GENDER, ACTIVITY = range(6)
EDIT_NAME, EDIT_WEIGHT, EDIT_HEIGHT, EDIT_AGE, EDIT_GENDER, EDIT_ACTIVITY = range(6, 12)
ADD_MEAL, AWAIT_CONFIRM = range(12, 14)

ACTIVITY_LABELS = {
    'none': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    'low': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è',
    'medium': '–°—Ä–µ–¥–Ω—è—è',
    'high': '–í—ã—Å–æ–∫–∞—è'
}


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    user_id = update.effective_user.id
    user = get_user(user_id)

    if user:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())
        return ConversationHandler.END

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=None
    )
    return NAME


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
    return WEIGHT


async def weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if weight <= 0: raise ValueError
        context.user_data['weight'] = weight
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
        return WEIGHT


async def height_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        if height <= 0: raise ValueError
        context.user_data['height'] = height
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT


async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age <= 0: raise ValueError
        context.user_data['age'] = age

        keyboard = [
            [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data='male'),
             InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data='female')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=reply_markup)
        return GENDER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
        return AGE


async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['gender'] = query.data

    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data='none')],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data='low')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data='medium')],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data='high')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    return ACTIVITY


async def activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    activity_code = query.data
    context.user_data['activity_level'] = activity_code

    user_id = update.effective_user.id
    name = context.user_data['name']
    weight = context.user_data['weight']
    height = context.user_data['height']
    age = context.user_data['age']
    gender = context.user_data['gender']

    try:
        daily_calories = calculate_daily_calories(weight, height, age, gender, activity_code)
        activity_label = ACTIVITY_LABELS[activity_code]
        add_user(user_id, name, weight, height, age, gender, activity_label, daily_calories)

        await query.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ù–æ—Ä–º–∞: {daily_calories} –∫–∫–∞–ª",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(e)
        await query.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END


# --- –ü—Ä–æ—Ñ–∏–ª—å ---
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. /start", reply_markup=None)
        return

    _, name, weight, height, age, gender, activity_level, daily_calories = user
    gender_str = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"

    keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>:\n\n"
        f"–ò–º—è: {name}\n–í–µ—Å: {weight} –∫–≥\n–†–æ—Å—Ç: {height} —Å–º\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender_str}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_level}\n"
        f"–ù–æ—Ä–º–∞: <b>{daily_calories} –∫–∫–∞–ª</b>",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: –Ω–∞—á–∞–ª–æ ---
async def edit_profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    return EDIT_NAME


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: —à–∞–≥–∏ ---
async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–ù–æ–≤—ã–π –≤–µ—Å (–≤ –∫–≥):")
    return EDIT_WEIGHT


async def edit_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if weight <= 0: raise ValueError
        context.user_data['weight'] = weight
        await update.message.reply_text("–ù–æ–≤—ã–π —Ä–æ—Å—Ç (–≤ —Å–º):")
        return EDIT_HEIGHT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
        return EDIT_WEIGHT


async def edit_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        if height <= 0: raise ValueError
        context.user_data['height'] = height
        await update.message.reply_text("–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return EDIT_AGE
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return EDIT_HEIGHT


async def edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age <= 0: raise ValueError
        context.user_data['age'] = age

        keyboard = [
            [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="edit_male"),
             InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="edit_female")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=reply_markup)
        return EDIT_GENDER
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return EDIT_AGE


async def edit_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['gender'] = 'male' if 'male' in query.data else 'female'
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")

    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="edit_none")],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="edit_low")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="edit_medium")],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data="edit_high")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    return EDIT_ACTIVITY


async def edit_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    activity_code = query.data.replace("edit_", "")
    context.user_data['activity_level_code'] = activity_code

    weight = context.user_data['weight']
    height = context.user_data['height']
    age = context.user_data['age']
    gender = context.user_data['gender']

    try:
        new_calories = calculate_daily_calories(weight, height, age, gender, activity_code)
        user_id = update.effective_user.id
        name = context.user_data['name']
        activity_label = ACTIVITY_LABELS[activity_code]
        add_user(user_id, name, weight, height, age, gender, activity_label, new_calories)

        await query.message.reply_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã ---
async def add_meal_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å—ä–µ–ª:", reply_markup=None)
    return ADD_MEAL


async def handle_food_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    food_text = update.message.text

    if not YANDEX_GPT_API_KEY or not YANDEX_GPT_FOLDER_ID:
        await update.message.reply_text("–û—à–∏–±–∫–∞: GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=get_main_menu())
        return ConversationHandler.END

    try:
        await context.bot.send_chat_action(update.effective_chat.id, "typing")
        result = await analyze_food_with_gpt(food_text, YANDEX_GPT_API_KEY, YANDEX_GPT_FOLDER_ID)

        items = result.get("items", [])
        total_calories = result.get("total_calories", 0)

        context.user_data['pending_meal'] = {
            'food_text': food_text,
            'calories': total_calories,
            'items': items
        }

        product_list = "\n".join(
            [f"‚Ä¢ {item['product']} ‚Äî {item['quantity']} ‚Äî {item['calories']} –∫–∫–∞–ª" for item in items]
        ) if items else "‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã."

        summary = f"""
<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>

{product_list}

<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:</b> {total_calories} –∫–∫–∞–ª

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_meal")],
            [InlineKeyboardButton("üîÅ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="retry_meal")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(summary.strip(), reply_markup=reply_markup, parse_mode="HTML")
        return AWAIT_CONFIRM

    except Exception as e:
        logger.error(f"GPT error: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END


async def confirm_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pending = context.user_data.get('pending_meal')
    if not pending:
        await query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    food_text = pending['food_text']
    calories = pending['calories']

    add_meal(update.effective_user.id, food_text, calories)

    await query.message.reply_text(
        f"‚úÖ –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{calories} –∫–∫–∞–ª</b>",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END


async def retry_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å—ä–µ–ª:")
    return ADD_MEAL


async def cancel_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END


# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    daily_norm = user[7] if user else 0
    stats_data = get_stats(user_id)

    keyboard = [[InlineKeyboardButton("üìÖ –ú–µ–Ω—é –∑–∞ 7 –¥–Ω–µ–π", callback_data="last_7_days")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n\n"
        f"–°–µ–≥–æ–¥–Ω—è: {stats_data['day']} / {daily_norm} –∫–∫–∞–ª\n"
        f"–ù–µ–¥–µ–ª—è: {stats_data['week']} –∫–∫–∞–ª\n"
        f"–ú–µ—Å—è—Ü: {stats_data['month']} –∫–∫–∞–ª",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def show_last_7_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    meals = get_meals_last_7_days(user_id)

    if not meals:
        await query.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_menu())
        return

    daily_meals = defaultdict(list)
    total_per_day = defaultdict(float)

    for meal in meals:
        date_str = meal['timestamp'].split()[0]
        date_friendly = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m")
        daily_meals[date_friendly].append(f"‚Ä¢ {meal['food_text']} ‚Äî {meal['calories']} –∫–∫–∞–ª")
        total_per_day[date_friendly] += meal['calories']

    message = "üìÖ <b>–ú–µ–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>:\n\n"
    for date, items in daily_meals.items():
        total = total_per_day[date]
        message += f"<u><b>{date}</b> (–≤—Å–µ–≥–æ: {total} –∫–∫–∞–ª)</u>\n"
        message += "\n".join(items)
        message += "\n\n"

    await query.message.reply_text(message, parse_mode="HTML", reply_markup=get_main_menu())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
profile_handler = MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), profile)
stats_handler = MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats)

meal_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏$"), add_meal_start)],
    states={
        ADD_MEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_food_input)],
        AWAIT_CONFIRM: [
            CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$"),
            CallbackQueryHandler(retry_meal, pattern="^retry_meal$")
        ]
    },
    fallbacks=[CommandHandler('cancel', cancel_meal)],
    per_user=True
)

edit_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(edit_profile_start, pattern="edit_profile")],
    states={
        EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
        EDIT_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_weight)],
        EDIT_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_height)],
        EDIT_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_age)],
        EDIT_GENDER: [CallbackQueryHandler(edit_gender)],
        EDIT_ACTIVITY: [CallbackQueryHandler(edit_activity)]
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_user=True
)

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight_handler)],
        HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height_handler)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
        GENDER: [CallbackQueryHandler(gender_handler)],
        ACTIVITY: [CallbackQueryHandler(activity_handler)]
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_user=True
)

# –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
confirm_handler = CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$")
retry_handler = CallbackQueryHandler(retry_meal, pattern="^retry_meal$")
last_7_days_handler = CallbackQueryHandler(show_last_7_days, pattern="^last_7_days$")