from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters, CallbackContext
)
from bot.database import add_user, get_user, add_meal, get_stats, get_meals_last_7_days, set_notifications, get_notifications_status
from bot.utils import calculate_daily_calories, get_main_menu, render_progress_bar
from bot.database import calculate_macros, delete_meals_for_day
from bot.database import get_user_goal_info, update_goal_start_date, get_goal_start_date
from bot.yandex_gpt import analyze_food_with_gpt
from config.config import YANDEX_GPT_API_KEY, YANDEX_GPT_FOLDER_ID
from datetime import datetime, date
from collections import defaultdict
from bot.charts import create_weekly_chart, create_monthly_chart
from bot.yandex_speechkit import YandexSpeechToText
import os
from logger_config import logger

stt = YandexSpeechToText()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
NAME, WEIGHT, HEIGHT, AGE, GENDER, ACTIVITY, GOAL, TARGET_WEIGHT, GOAL_RATE = range(9)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
EDIT_NAME, EDIT_WEIGHT, EDIT_HEIGHT, EDIT_AGE, EDIT_GENDER, EDIT_ACTIVITY = range(9, 15)

EDIT_GOAL, EDIT_TARGET_WEIGHT, EDIT_GOAL_RATE = range(17, 20)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã
ADD_MEAL, AWAIT_CONFIRM = range(15, 17)

ACTIVITY_LABELS = {
    'none': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    'low': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è',
    'medium': '–°—Ä–µ–¥–Ω—è—è',
    'high': '–í—ã—Å–æ–∫–∞—è'
}

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started /start command")
    user = get_user(user_id)

    tutorial_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏.\n\n"
        "üë§ –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —è —Ä–∞—Å—Å—á–∏—Ç—É—é —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n"
        "üìù –î–æ–±–∞–≤–ª—è–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ ‚Äî —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã.\n"
        "üìä –°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, –∫–∞–∫ –±–ª–∏–∑–∫–æ —Ç—ã –∫ —Å–≤–æ–µ–π –Ω–æ—Ä–º–µ.\n\n"
        "**–ß—Ç–æ –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è!**"
    )

    user_text = (
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏ —è –∑–Ω–∞—é —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n\n"
            "- üìù –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ ‚Äî —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ—Å—ã.\n"
            "- üìä –°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ.\n"
            "- üë§ –†–µ–¥–∞–∫—Ç–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
        )

    if user:
        logger.info(f"User {user_id} already registered, sending main menu")
        await update.message.reply_text(user_text, parse_mode="Markdown", reply_markup=get_main_menu())
        return ConversationHandler.END
    logger.info(f"User {user_id} not registered, sending tutorial")
    await update.message.reply_text(tutorial_text, parse_mode="Markdown", reply_markup=None)
    return NAME


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = update.message.text
    context.user_data['name'] = update.message.text
    logger.info(f"User {user_id} entered name: {name}")
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
    return WEIGHT


async def weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        weight = float(update.message.text)
        if weight <= 0: raise ValueError
        context.user_data['weight'] = weight
        logger.info(f"User {user_id} entered weight: {weight}")
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT
    except ValueError:
        logger.warning(f"User {user_id} entered invalid weight: {update.message.text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
        return WEIGHT


async def height_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        height = int(update.message.text)
        if height <= 0: raise ValueError
        context.user_data['height'] = height
        logger.info(f"User {user_id} entered height: {height}")
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    except ValueError:
        logger.warning(f"User {user_id} entered invalid height: {update.message.text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return HEIGHT


async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        age = int(update.message.text)
        if age <= 0: raise ValueError
        context.user_data['age'] = age
        logger.info(f"User {user_id} entered age: {age}")

        keyboard = [
            [InlineKeyboardButton("üöπ –ú—É–∂—Å–∫–æ–π", callback_data='male'),
             InlineKeyboardButton("üö∫ –ñ–µ–Ω—Å–∫–∏–π", callback_data='female')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=reply_markup)
        return GENDER
    except ValueError:
        logger.warning(f"User {user_id} entered invalid age: {update.message.text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
        return AGE


async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['gender'] = query.data
    logger.info(f"User {user_id} selected gender: {query.data}")

    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏)", callback_data='none')],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (—Ä–∞–±–æ—Ç–∞ –Ω–∞ –Ω–æ–≥–∞—Ö)", callback_data='low')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è (1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)", callback_data='medium')],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)", callback_data='high')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    return ACTIVITY

async def activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    activity_code = query.data  # 'none', 'low', 'medium', 'high'
    context.user_data['activity_code'] = activity_code  # –∫–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    context.user_data['activity_level'] = ACTIVITY_LABELS[activity_code]  # –º–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    logger.info(f"User {user_id} selected activity: {activity_code}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å / –Ω–∞–±—Ä–∞—Ç—å / –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å)
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data='goal_lose'),
         InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data='goal_gain')],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data='goal_maintain')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=reply_markup)
    return GOAL

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} canceled registration")
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END

# --- –ü—Ä–æ—Ñ–∏–ª—å ---
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested profile view")
    user = get_user(user_id)
    if not user:
        logger.warning(f"User {user_id} has no profile")
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. /start", reply_markup=None)
        return

    name = user["name"]
    weight = user["weight"]
    height = user["height"]
    age = user["age"]
    gender = user["gender"]
    activity_level = user["activity_level"]
    daily_calories = user["daily_calories"] or 0
    protein_norm = user["protein_norm"] or 0
    fat_norm = user["fat_norm"] or 0
    carbs_norm = user["carbs_norm"] or 0
    goal_type = user.get("goal_type", "maintain")
    target_weight = user.get("target_weight")
    goal_rate = user.get("goal_rate")

    gender_str = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"

    keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    extra = ""
    if goal_type and goal_type != "maintain":
        extra = f"\n<b>–¶–µ–ª—å</b>: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'}\n"
        extra += f"<b>–¶–µ–ª–µ–≤–æ–π –≤–µ—Å</b>: {target_weight} –∫–≥\n<b>–¢–µ–º–ø</b>: {goal_rate}\n\n"

    await update.message.reply_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>:\n\n"
        f"<b>–ò–º—è</b>: {name}\n<b>–í–µ—Å</b>: {weight} –∫–≥\n<b>–†–æ—Å—Ç</b>: {height} —Å–º\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {age}\n<b>–ü–æ–ª</b>: {gender_str}\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>: {activity_level}\n\n"
        f"{extra}"
        f"<b>üéØ –ù–æ—Ä–º–∞</b>: {daily_calories} –∫–∫–∞–ª\n"
        f"<b>ü•©–ë</b>: {protein_norm} –≥, <b>ü•ë–ñ</b>: {fat_norm} –≥, <b>üçû–£</b>: {carbs_norm} –≥",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    logger.info(f"User {user_id} profile displayed")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: –Ω–∞—á–∞–ª–æ ---

async def edit_profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    logger.info(f"User {user_id} started editing profile")

    keyboard = [
        [InlineKeyboardButton("üë§ –ò–º—è", callback_data="edit_name"),
        InlineKeyboardButton("‚öñÔ∏è –í–µ—Å", callback_data="edit_weight")],
        [InlineKeyboardButton("üìè –†–æ—Å—Ç", callback_data="edit_height"),
        InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [InlineKeyboardButton("üöª –ü–æ–ª", callback_data="edit_gender"),
        InlineKeyboardButton("üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="edit_activity")],
        [InlineKeyboardButton("üéØ –¶–µ–ª—å", callback_data="edit_goal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)
    logger.debug(f"User {user_id} edit profile menu sent")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
async def edit_name_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'name'
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=None)
    logger.info(f"User {user_id} editing field: name")

async def edit_weight_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'weight'
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–∫–≥):", reply_markup=None)
    logger.info(f"User {user_id} editing field: weight")

async def edit_height_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'height'
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (—Å–º):", reply_markup=None)
    logger.info(f"User {user_id} editing field: height")

async def edit_age_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    context.user_data['editing_field'] = 'age'
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=None)
    logger.info(f"User {user_id} editing field: age")

async def edit_gender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üöπ–ú—É–∂—Å–∫–æ–π", callback_data="set_gender_male"),
         InlineKeyboardButton("üö∫–ñ–µ–Ω—Å–∫–∏–π", callback_data="set_gender_female")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"User {user_id} failed to delete old message for gender edit: {e}")
        pass
    
    await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=reply_markup)
    logger.info(f"User {user_id} editing field: gender")

async def edit_activity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="set_activity_none")],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="set_activity_low")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="set_activity_medium")],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data="set_activity_high")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"User {user_id} failed to delete old message for activity edit: {e}")
        pass
    
    await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    logger.info(f"User {user_id} editing field: activity")

async def edit_goal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="set_goal_lose")],
        [InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data="set_goal_gain")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="set_goal_maintain")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"User {user_id} failed to delete old message for goal edit: {e}")
        pass
    
    await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=reply_markup)
    logger.info(f"User {user_id} editing field: goal")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def handle_all_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_all_text_input –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"editing_field: {context.user_data.get('editing_field')}")
    logger.info(f"editing_goal: {context.user_data.get('editing_goal')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if 'editing_field' not in context.user_data and 'editing_goal' not in context.user_data:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    text = update.message.text
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        context.user_data.pop('editing_field', None)
        context.user_data.pop('editing_goal', None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—è —Ü–µ–ª–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    goal_type = user.get("goal_type")
    target_weight = user.get("target_weight")
    goal_rate = user.get("goal_rate")

    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–ª–µ
    if 'editing_field' in context.user_data:
        field = context.user_data['editing_field']
        logger.info(f"User {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–µ {field}")

        try:
            if field == 'name':
                new_name = text
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    new_name,
                    user["weight"],
                    user["height"],
                    user["age"],
                    user["gender"],
                    user["activity_level"],
                    user["daily_calories"],
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu())
                logger.info(f"User {user_id} –æ–±–Ω–æ–≤–∏–ª –∏–º—è –Ω–∞ {text}")

            elif field == 'weight':
                weight = float(text)
                if weight <= 0:
                    raise ValueError
                activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
                new_calories = calculate_daily_calories(weight, user["height"], user["age"], user["gender"], activity_code)
                protein_norm, fat_norm, carbs_norm = calculate_macros(weight, new_calories)
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    user["name"],
                    weight,
                    user["height"],
                    user["age"],
                    user["gender"],
                    user["activity_level"],
                    new_calories,
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text(
                    f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω!\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
                    f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
                    parse_mode="HTML", reply_markup=get_main_menu()
                )
                logger.info(f"User {user_id} –æ–±–Ω–æ–≤–∏–ª –≤–µ—Å –Ω–∞ {weight} –∫–≥, –Ω–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª")

            elif field == 'height':
                height = int(text)
                if height <= 0:
                    raise ValueError
                activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
                new_calories = calculate_daily_calories(user["weight"], height, user["age"], user["gender"], activity_code)
                protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    user["name"],
                    user["weight"],
                    height,
                    user["age"],
                    user["gender"],
                    user["activity_level"],
                    new_calories,
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text(
                    f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
                    f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
                    parse_mode="HTML", reply_markup=get_main_menu()
                )

            elif field == 'age':
                age = int(text)
                if age <= 0:
                    raise ValueError
                activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
                new_calories = calculate_daily_calories(user["weight"], user["height"], age, user["gender"], activity_code)
                protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
                goal_start_date = get_goal_start_date(user_id)
                add_user(
                    user_id,
                    user["name"],
                    user["weight"],
                    user["height"],
                    age,
                    user["gender"],
                    user["activity_level"],
                    new_calories,
                    goal_type=goal_type,
                    target_weight=target_weight,
                    goal_rate=goal_rate,
                    goal_start_date=goal_start_date
                )
                await update.message.reply_text(
                    f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
                    f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
                    parse_mode="HTML", reply_markup=get_main_menu()
                )

        except ValueError:
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—è {field}: {text}")
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
            return

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('editing_field', None)
    
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å (–≤–≤–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å)
    elif 'editing_goal' in context.user_data:
        goal_type = context.user_data['editing_goal']
        logger.info(f"User {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª—å {goal_type}")
        
        try:
            target_weight = float(text)
            if target_weight <= 0:
                raise ValueError
        except ValueError:
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—è {field}: {text}")
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.0):")
            return

        current_weight = user["weight"]

        if goal_type == "lose" and not (target_weight < current_weight):
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å {target_weight} –¥–ª—è —Ü–µ–ª–∏ {goal_type}")
            await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ:")
            return
        if goal_type == "gain" and not (target_weight > current_weight):
            logger.warning(f"User {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å {target_weight} –¥–ª—è —Ü–µ–ª–∏ {goal_type}")
            await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ:")
            return

        context.user_data['editing_target_weight'] = target_weight
        logger.info(f"User {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å {target_weight} –¥–ª—è —Ü–µ–ª–∏ {goal_type}")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–º–ø
        if goal_type == "lose":
            keyboard = [
                [InlineKeyboardButton("–î–æ–ª–≥–æ –∏ –ª–µ–≥–∫–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="set_rate_lose_slow")],
                [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="set_rate_lose_medium")],
                [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 1.0 –∫–≥/–Ω–µ–¥", callback_data="set_rate_lose_fast")]
            ]
        else:  # gain
            keyboard = [
                [InlineKeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="set_rate_gain_slow")],
                [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="set_rate_gain_medium")],
                [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 0.75 –∫–≥/–Ω–µ–¥", callback_data="set_rate_gain_fast")]
            ]

        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        logger.info(f"User {user_id} –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–º–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –¥–ª—è {goal_type}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
async def set_gender_male(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked 'Male' gender button")
    if not user:
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"User {user_id} profile not found when trying to set gender to Male")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], "male", activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], "male", 
            user["activity_level"], new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    
    logger.info(
    f"User {user_id} updated gender to Male; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_gender_female(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked 'Female' gender button")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set gender to Female")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], "female", activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], "female", 
            user["activity_level"], new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    
    logger.info(
    f"User {user_id} updated gender to Female; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML", reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def set_activity_none(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'None'")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'None'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "none")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\nüéØ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {new_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_activity_low(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'Low'")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'Low'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "low")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_activity_medium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'Medium'")
    
    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'Medium'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "medium")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–°—Ä–µ–¥–Ω—è—è", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML", reply_markup=get_main_menu()
    )

async def set_activity_high(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked activity level 'High'")

    if not user:
        try:
            await query.message.delete()
        except Exception:
            logger.warning(f"User {user_id} profile not found when trying to set activity level 'High'")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    new_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], "high")
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], new_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"], 
            "–í—ã—Å–æ–∫–∞—è", new_calories,
            goal_type=user.get("goal_type"), target_weight=user.get("target_weight"), 
            goal_rate=user.get("goal_rate"))
    
    logger.info(
    f"User {user_id} updated activity to 'None'; "
    f"new_calories={new_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞: {new_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML", reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
async def set_goal_maintain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} clicked 'Maintain goal' button")
    
    if not user:
        logger.warning(f"User {user_id} profile not found when selecting 'maintain' goal")
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"Failed to delete message for user {user_id}: {e}")
            pass
        await query.message.chat.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        return
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    daily_calories = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], activity_code)
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], daily_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"],
             user["activity_level"], daily_calories, goal_type='maintain', target_weight=None, goal_rate=None)
    logger.info(
        f"User {user_id} set goal to 'maintain'; "
        f"daily_calories={daily_calories}, protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    try:
        await query.message.delete()
    except Exception:
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ¬´–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å¬ª!\n"
        f" –ù–æ—Ä–º–∞: {daily_calories} –∫–∫–∞–ª\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

async def set_goal_lose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} clicked 'Lose weight' goal button")
    
    context.user_data['editing_goal'] = 'lose'
    logger.info(f"User {user_id} entering target weight input for goal 'lose'")
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete message when entering target weight for user {user_id}: {e}")
        pass
    
    await query.message.chat.send_message("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥):", reply_markup=None)

async def set_goal_gain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} clicked 'Gain weight' goal button")

    context.user_data['editing_goal'] = 'gain'
    logger.info(f"User {user_id} entering target weight input for goal 'gain'")
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete message when entering target weight for user {user_id}: {e}")
        pass
    
    await query.message.chat.send_message("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥):", reply_markup=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–∞
async def set_rate_lose_slow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_lose_slow (0.25 kg/week)")
    await set_goal_with_rate(update, context, "lose", 0.25)

async def set_rate_lose_medium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_lose_medium (0.5 kg/week)")
    await set_goal_with_rate(update, context, "lose", 0.5)

async def set_rate_lose_fast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_lose_fast (1.0 kg/week)")
    await set_goal_with_rate(update, context, "lose", 1.0)

async def set_rate_gain_slow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_gain_slow (0.25 kg/week)")
    await set_goal_with_rate(update, context, "gain", 0.25)

async def set_rate_gain_medium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_gain_medium (0.5 kg/week)")
    await set_goal_with_rate(update, context, "gain", 0.5)

async def set_rate_gain_fast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} clicked rate_gain_fast (0.75 kg/week)")
    await set_goal_with_rate(update, context, "gain", 0.75)

async def set_goal_with_rate(update: Update, context: ContextTypes.DEFAULT_TYPE, goal_type: str, kg_per_week: float):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} invoked set_goal_with_rate; goal_type={goal_type}, kg_per_week={kg_per_week}")
    target_weight = context.user_data.get('editing_target_weight')
    
    activity_code = [k for k, v in ACTIVITY_LABELS.items() if v == user["activity_level"]][0]
    maintenance = calculate_daily_calories(user["weight"], user["height"], user["age"], user["gender"], activity_code)
    daily_adjustment = (kg_per_week * 7700) / 7.0
    daily_calories = round(maintenance - daily_adjustment, 1) if goal_type == "lose" else round(maintenance + daily_adjustment, 1)
    
    protein_norm, fat_norm, carbs_norm = calculate_macros(user["weight"], daily_calories)
    
    add_user(user_id, user["name"], user["weight"], user["height"], user["age"], user["gender"],
             user["activity_level"], daily_calories, goal_type=goal_type,
             target_weight=target_weight, goal_rate=f"{kg_per_week}–∫–≥/–Ω–µ–¥")
    
    logger.info(
        f"User {user_id} goal updated: goal_type={goal_type}, kg_per_week={kg_per_week}, "
        f"target_weight={target_weight}, daily_calories={daily_calories}, "
        f"protein={protein_norm}, fat={fat_norm}, carbs={carbs_norm}"
    )
    
    # –í–ê–ñ–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ü–µ–ª–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    logger.info(f"Updating goal start date for user {user_id} during profile edit")
    update_goal_start_date(user_id, datetime.now())
    
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete message after setting goal rate for user {user_id}: {e}")
        pass
    
    await query.message.chat.send_message(
        f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
        f"üéØ {('–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å')} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
        f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n"
        f"üéØ –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏: {daily_calories} –∫–∫–∞–ª\n\n"
        f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('editing_goal', None)
    context.user_data.pop('editing_target_weight', None)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã ---
async def add_meal_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started adding a meal (text input)")
    await update.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏, —á—Ç–æ —Å—ä–µ–ª. –ü–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —É–∫–∞–∑—ã–≤–∞—è –≤–µ—Å –ø–æ—Ä—Ü–∏–π –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", reply_markup=None)
    return ADD_MEAL

async def process_food_text(update, context, food_text: str):
    # üïí –°–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"
    processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    user_id = update.effective_user.id
    logger.info(f"User {user_id} submitted food text: {food_text}")

    if not YANDEX_GPT_API_KEY or not YANDEX_GPT_FOLDER_ID:
        await update.message.reply_text("–û—à–∏–±–∫–∞: GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=get_main_menu())
        return ConversationHandler.END

    try:
        await context.bot.send_chat_action(update.effective_chat.id, "typing")
        result = await analyze_food_with_gpt(food_text, YANDEX_GPT_API_KEY, YANDEX_GPT_FOLDER_ID)

        items = result.get("items", [])
        totals = result.get("total", {"calories": 0, "protein": 0, "fat": 0, "carbs": 0})

        context.user_data['pending_meal'] = {
            'food_text': food_text,
            'calories': totals["calories"],
            'protein': totals["protein"],
            'fat': totals["fat"],
            'carbs': totals["carbs"],
            'items': items
        }
        logger.info(
        f"User {user_id} GPT recognized items: {len(items)} items, "
        f"total_calories={totals['calories']}, protein={totals['protein']}, "
        f"fat={totals['fat']}, carbs={totals['carbs']}"
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"
        try:
            await processing_msg.delete()
        except Exception as e:
            logger.error(f"User {user_id} GPT processing error: {e}")
            pass

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        user_id = update.effective_user.id
        stats_data = get_stats(user_id)
        daily_norm = get_user(user_id)["daily_calories"]
        already_eaten = stats_data['day']['calories'] or 0
        projected = already_eaten + totals['calories'] or 0

        progress_after = render_progress_bar(projected, daily_norm)

        warning_text = ""
        if daily_norm > 0 and projected > daily_norm:
            excess = projected - daily_norm
            warning_text = f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –Ω–∞ <b>{excess:.0f} –∫–∫–∞–ª</b>!\n"

        product_list = "\n".join(
            [f"‚Ä¢ {i['product']} ‚Äî {i['quantity']} ‚Äî {i['calories']} –∫–∫–∞–ª, "
             f"–ë: {i['protein']} –≥, –ñ: {i['fat']} –≥, –£: {i['carbs']} –≥" for i in items]
        )

        summary = f"""
<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>

{product_list}

<b>üçΩ –ò—Ç–æ–≥–æ:</b> {totals['calories']} –∫–∫–∞–ª  
ü•©–ë: {totals['protein']} –≥, ü•ë–ñ: {totals['fat']} –≥, üçû–£: {totals['carbs']} –≥

<b>üìä –ù–æ—Ä–º–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>
{progress_after}
{warning_text}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_meal")],
            [InlineKeyboardButton("üîÅ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="retry_meal")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        msg = await update.message.reply_text(summary.strip(), reply_markup=reply_markup, parse_mode="HTML")
        context.user_data['last_meal_message_id'] = msg.message_id

        return AWAIT_CONFIRM

    except Exception as e:
        logger.error(f"GPT error: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END


async def add_food_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    voice = update.message.voice
    user_id = update.effective_user.id
    logger.info(f"User {user_id} sent a voice message for meal input")

    if not voice:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòî")
        return ADD_MEAL

    file = await context.bot.get_file(voice.file_id)
    file_path = f"voice_{user.id}.ogg"
    await file.download_to_drive(file_path)

    try:
        # üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        text = stt.recognize(file_path)
        logger.info(f"User {user_id} voice STT result: {text}")

        # üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        return await process_food_text(update, context, text)

    except Exception as e:
        logger.error(f"User {user_id} voice processing error: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        return ADD_MEAL

    finally:
        if os.path.exists(file_path):
            os.remove(file_path)



async def handle_food_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    food_text = update.message.text
    return await process_food_text(update, context, food_text)


async def confirm_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pending = context.user_data.get('pending_meal')
    if not pending:
        await query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    add_meal(
        update.effective_user.id,
        pending['food_text'],
        pending['calories'],
        pending['protein'],
        pending['fat'],
        pending['carbs']
    )

    user_id = update.effective_user.id
    logger.info(
    f"User {user_id} confirmed meal: {pending['calories']} kcal, "
    f"protein={pending['protein']}, fat={pending['fat']}, carbs={pending['carbs']}"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –µ–¥—ã + –∫–Ω–æ–ø–∫–∞–º–∏
    last_message_id = context.user_data.get('last_meal_message_id')
    if last_message_id:
        try:
            await query.message.chat.delete_message(last_message_id)
        except Exception as e:
            logger.warning(f"User {user_id} failed to delete old meal message: {e}")
        context.user_data.pop('last_meal_message_id', None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await query.message.chat.send_message(
        f"‚úÖ –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
        f"üçΩ –î–æ–±–∞–≤–ª–µ–Ω–æ: {pending['calories']} –∫–∫–∞–ª\n"
        f"ü•©–ë: {pending['protein']} –≥, ü•ë–ñ: {pending['fat']} –≥, üçû–£: {pending['carbs']} –≥",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END



async def retry_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    logger.info(f"User {user_id} chose to retry meal input")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –µ–¥—ã + –∫–Ω–æ–ø–∫–∞–º–∏
    last_message_id = context.user_data.get('last_meal_message_id')
    if last_message_id:
        try:
            await query.message.chat.delete_message(last_message_id)
        except Exception as e:
            logger.warning(f"User {user_id} failed to delete old meal message: {e}")
        context.user_data.pop('last_meal_message_id', None)

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –µ–¥—É –∑–∞–Ω–æ–≤–æ
    await query.message.chat.send_message(
        "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å—ä–µ–ª–∏. –ü–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —É–∫–∞–∑—ã–≤–∞—è –≤–µ—Å –ø–æ—Ä—Ü–∏–π –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:"
    )
    return ADD_MEAL



async def cancel_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    logger.info(f"User {user_id} requested stats")

    if not user:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. /start", reply_markup=None)
        return

    daily_norm = user["daily_calories"] or 0
    protein_norm = user["protein_norm"] or 0
    fat_norm = user["fat_norm"] or 0
    carbs_norm = user["carbs_norm"] or 0

    stats_data = get_stats(user_id)
    progress_today = render_progress_bar(stats_data['day']['calories'], daily_norm)

    day_stats = stats_data.get('day', {})
    week_stats = stats_data.get('week', {})
    month_stats = stats_data.get('month', {})

    day_calories = day_stats.get('calories') or 0
    day_protein = day_stats.get('protein') or 0
    day_fat = day_stats.get('fat') or 0
    day_carbs = day_stats.get('carbs') or 0

    week_calories = week_stats.get('calories') or 0
    week_protein = week_stats.get('protein') or 0
    week_fat = week_stats.get('fat') or 0
    week_carbs = week_stats.get('carbs') or 0

    month_calories = month_stats.get('calories') or 0
    month_protein = month_stats.get('protein') or 0
    month_fat = month_stats.get('fat') or 0
    month_carbs = month_stats.get('carbs') or 0

    warning_text_today = ""
    if daily_norm > 0 and day_calories > daily_norm:
        excess_today = day_calories - daily_norm
        warning_text_today = f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ:</b> +{excess_today:.0f} –∫–∫–∞–ª"
        logger.warning(f"User {user_id} exceeded daily calories by {excess_today} kcal")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ü–µ–ª—å
    goal_info = get_user_goal_info(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="chart_week"),
         InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü", callback_data="chart_month")],
        [InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="last_7_days"),
         InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –µ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="clear_today")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ü–µ–ª–µ–π –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if goal_info:
        keyboard.append([InlineKeyboardButton("üéØ –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–∏", callback_data="goal_chart"), InlineKeyboardButton("üìà –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="current_progress")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n\n"
        f"<b>–°–µ–≥–æ–¥–Ω—è</b>:\n\n"
        f"–ö–∞–ª–ª–æ—Ä–∏–π: {progress_today}\n\n"
        f"{warning_text_today}\n\n"
        f"ü•©–ë–µ–ª–∫–æ–≤: {day_protein} / {protein_norm} –≥\n"
        f"ü•ë–ñ–∏—Ä–æ–≤: {day_fat} / {fat_norm} –≥\n"
        f"üçû–£–≥–ª–µ–≤–æ–¥–æ–≤: {day_carbs} / {carbs_norm} –≥\n\n"
        f"<b>üìÖ–ù–µ–¥–µ–ª—è</b>: {week_calories} –∫–∫–∞–ª (–ë: {week_protein} –≥, –ñ: {week_fat} –≥, –£: {week_carbs} –≥)\n"
        f"<b>üìÖ–ú–µ—Å—è—Ü</b>: {month_calories} –∫–∫–∞–ª (–ë: {month_protein} –≥, –ñ: {month_fat} –≥, –£: {month_carbs} –≥)",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def show_last_7_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    meals = get_meals_last_7_days(user_id)
    logger.info(f"User {user_id} requested last 7 days menu")

    if not meals:
        logger.info(f"User {user_id} has no meals for last 7 days")
        await query.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_menu())
        return

    daily_meals = defaultdict(list)
    total_per_day = defaultdict(float)

    for meal in meals:
        date_str = meal['timestamp'].split()[0]
        date_friendly = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m")
        daily_meals[date_friendly].append(f"‚ñ™Ô∏è {meal['food_text']} ‚Äî {meal['calories']} –∫–∫–∞–ª")
        total_per_day[date_friendly] += meal['calories']

    message = "üóì <b>–ú–µ–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>:\n\n"
    for date, items in daily_meals.items():
        total = total_per_day[date]
        message += f"üìå<u><b>{date}</b> (–≤—Å–µ–≥–æ: {total} –∫–∫–∞–ª)</u>\n"
        message += "\n".join(items)
        message += "\n\n"

    await query.message.reply_text(message, parse_mode="HTML", reply_markup=get_main_menu())

async def clear_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()

    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    deleted = delete_meals_for_day(user_id)

    if deleted:
        logger.info(f"User {user_id} cleared today's meals")
        await query.message.reply_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_menu())
    else:
        logger.info(f"User {user_id} tried to clear meals but none were added today")
        await query.message.reply_text(f"‚ÑπÔ∏è –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏.", reply_markup=get_main_menu())

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Fallback handler triggered for user {user_id}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
    if 'editing_field' in context.user_data or 'editing_goal' in context.user_data:
        logger.info(f"User {user_id} is editing profile/goal, skipping fallback")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç."
    )


# –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 

async def show_goal_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested goal chart")
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    goal_info = get_user_goal_info(user_id)
    
    if not goal_info:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.", reply_markup=get_main_menu())
        return
    
    try:
        from bot.charts import create_goal_progress_chart
        from bot.database import get_goal_start_date
        
        start_date = get_goal_start_date(user_id)
        img_buffer, goal_date = await create_goal_progress_chart(
            user_id, 
            goal_info['current_weight'], 
            goal_info['target_weight'], 
            goal_info['goal_type'], 
            goal_info['goal_rate'],
            start_date
        )
        
        goal_date_str = goal_date.strftime("%d.%m.%Y")
        
        await query.message.reply_photo(
            photo=img_buffer,
            caption=f"üìâ –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏\n\n"
                   f"–¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_info['goal_type']=='lose' else '–ù–∞–±—Ä–∞—Ç—å'}\n"
                   f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {goal_info['current_weight']} –∫–≥\n"
                   f"–¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {goal_info['target_weight']} –∫–≥\n"
                   f"–¢–µ–º–ø: {goal_info['goal_rate']}\n"
                   f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {goal_date_str}",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error generating for user {user_id}: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )


async def show_current_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested current progress chart")
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    goal_info = get_user_goal_info(user_id)
    
    if not goal_info:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.", reply_markup=get_main_menu())
        return
    
    try:
        from bot.charts import create_current_progress_chart
        from bot.database import get_goal_start_date
        
        start_date = get_goal_start_date(user_id)
        img_buffer = await create_current_progress_chart(
            user_id, 
            goal_info['current_weight'], 
            goal_info['target_weight'], 
            goal_info['goal_type'], 
            goal_info['goal_rate'],
            start_date
        )
        
        await query.message.reply_photo(
            photo=img_buffer,
            caption="üìà –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error generating for user {user_id}: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

async def show_weekly_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested weekly chart")
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        img_buffer = await create_weekly_chart(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        await query.message.reply_photo(
            photo=img_buffer,
            caption="üìà –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error generating for user {user_id}: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

async def show_monthly_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested monthly chart")
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        img_buffer = await create_monthly_chart(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        await query.message.reply_photo(
            photo=img_buffer,
            caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –º–µ—Å—è—Ü",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error generating for user {user_id}: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

async def goal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    goal = query.data.replace("goal_", "")  # 'lose' | 'gain' | 'maintain'
    context.user_data['goal'] = goal
    user_id = update.effective_user.id
    logger.info(f"User {user_id} selected goal: {goal}")

    user_id = update.effective_user.id
    name = context.user_data.get('name')
    weight = context.user_data.get('weight')
    height = context.user_data.get('height')
    age = context.user_data.get('age')
    gender = context.user_data.get('gender')
    activity_code = context.user_data.get('activity_code')
    activity_label = ACTIVITY_LABELS.get(activity_code, activity_code)

    # –ï—Å–ª–∏ —Ü–µ–ª—å - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É (–∫–∞–∫ —Ä–∞–Ω—å—à–µ), —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–æ—Ä–º—ã
    if goal == "maintain":
        try:
            daily_calories = calculate_daily_calories(weight, height, age, gender, activity_code)
            protein_norm, fat_norm, carbs_norm = calculate_macros(weight, daily_calories)
            add_user(user_id, name, weight, height, age, gender, activity_label, daily_calories,
                     goal_type='maintain', target_weight=None, goal_rate=None)

            await query.message.reply_text(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
                f"üéØ –¢–≤–æ—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):\n"
                f"<b>{daily_calories} –∫–∫–∞–ª</b>\n"
                f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error calculating daily calories for user {user_id}: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π /start –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

    # –ï—Å–ª–∏ —Ü–µ–ª—å –ø–æ—Ö—É–¥–µ—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä 70.0):", reply_markup=None)
    return TARGET_WEIGHT

async def target_weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    logger.info(f"User {user_id} entered target weight: {text}")
    try:
        target = float(text)
        if target <= 0:
            raise ValueError
    except ValueError:
        logger.warning(f"User {user_id} entered invalid target weight: {text}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.0):")
        return TARGET_WEIGHT

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    goal = context.user_data.get('goal')
    current_weight = context.user_data.get('weight')
    if goal == "lose" and not (target < current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:")
        return TARGET_WEIGHT
    if goal == "gain" and not (target > current_weight):
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:")
        return TARGET_WEIGHT

    context.user_data['target_weight'] = target

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–≥/–Ω–µ–¥)
    if goal == "lose":
        keyboard = [
            [InlineKeyboardButton("–î–æ–ª–≥–æ –∏ –ª–µ–≥–∫–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ (—Å–ª–æ–∂–Ω–æ) ‚Äî 1.0 –∫–≥/–Ω–µ–¥", callback_data="rate_lose_fast")]
        ]
    else:  # gain
        keyboard = [
            [InlineKeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ ‚Äî 0.25 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_slow")],
            [InlineKeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Äî 0.5 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_medium")],
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–æ ‚Äî 0.75 –∫–≥/–Ω–µ–¥", callback_data="rate_gain_fast")]
        ]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å):", reply_markup=InlineKeyboardMarkup(keyboard))
    return GOAL_RATE

async def goal_rate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()
    data = query.data  # e.g. rate_lose_medium
    parts = data.split("_")
    
    if len(parts) < 3:
        await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â—ë —Ä–∞–∑.", reply_markup=get_main_menu())
        return ConversationHandler.END

    goal_type = parts[1]
    rate_key = parts[2]

    # kg/week mapping
    mapping = {
        "lose": {"slow": 0.25, "medium": 0.5, "fast": 1.0},
        "gain": {"slow": 0.25, "medium": 0.5, "fast": 0.75}
    }
    kg_per_week = mapping.get(goal_type, {}).get(rate_key, 0.5)
    rate_label = f"{rate_key}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    name = context.user_data.get('name')
    weight = context.user_data.get('weight')
    height = context.user_data.get('height')
    age = context.user_data.get('age')
    gender = context.user_data.get('gender')
    activity_code = context.user_data.get('activity_code')
    activity_label = context.user_data.get('activity_level')
    target_weight = context.user_data.get('target_weight')

    logger.info(f"User {user_id} selected goal rate: {kg_per_week} kg/week for goal {goal_type}")

    if None in (name, weight, height, age, gender, activity_code):
        await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ /start", reply_markup=get_main_menu())
        return ConversationHandler.END

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–ª–∏
    maintenance = calculate_daily_calories(weight, height, age, gender, activity_code)
    daily_adjustment = (kg_per_week * 7700) / 7.0  # 7700 –∫–∫–∞–ª ~ 1 –∫–≥
    if goal_type == "lose":
        daily_calories = round(maintenance - daily_adjustment, 1)
    else:  # gain
        daily_calories = round(maintenance + daily_adjustment, 1)
    logger.info(f"Calculated daily calories for user {user_id}: {daily_calories} kcal")

    # –ú–∏–Ω–∏–º—É–º –∫–∫–∞–ª (–∑–∞—â–∏—Ç–∞) ‚Äî –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
    min_cal = 1200 if gender == "female" else 1500
    if daily_calories < min_cal:
        await query.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–º–ø –¥–∞—ë—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫—É—é –Ω–æ—Ä–º—É ({daily_calories} –∫–∫–∞–ª). –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —â–∞–¥—è—â–∏–π —Ç–µ–º–ø."
        )
        return GOAL_RATE

    # –§–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ë–ñ–£ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    if goal_type == "lose":
        protein_factor = 2.0
        fat_factor = 1.0
    elif goal_type == "gain":
        protein_factor = 1.6
        fat_factor = 1.0
    else:
        protein_factor = 1.8
        fat_factor = 1.0

    protein_norm, fat_norm, carbs_norm = calculate_macros(weight, daily_calories, protein_factor=protein_factor, fat_factor=fat_factor)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ goal
    add_user(user_id, name, weight, height, age, gender, activity_label, daily_calories,
             goal_type=goal_type, target_weight=target_weight, goal_rate=f"{kg_per_week}–∫–≥/–Ω–µ–¥")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ü–µ–ª–∏ - –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
    logger.info(f"Setting goal start date for user {user_id}")
    update_goal_start_date(user_id, datetime.now())

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–∏
    try:
        from bot.charts import create_goal_progress_chart
        img_buffer, goal_date = await create_goal_progress_chart(
            user_id, weight, target_weight, goal_type, f"{kg_per_week}–∫–≥/–Ω–µ–¥"
        )
        
        goal_date_str = goal_date.strftime("%d.%m.%Y")
        
        await query.message.reply_photo(
            photo=img_buffer,
            caption=f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
                   f"üéØ –¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
                   f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n"
                   f"üéØ –î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {goal_date_str}\n\n"
                   f"üéØ –ù–æ—Ä–º–∞ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏: <b>{daily_calories} –∫–∫–∞–ª</b>\n"
                   f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logger.error(f"Error generating goal chart for user {user_id}: {e}")
        await query.message.reply_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üéØ –¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ—Ç—å' if goal_type=='lose' else '–ù–∞–±—Ä–∞—Ç—å'} ({kg_per_week} –∫–≥/–Ω–µ–¥)\n"
            f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n\n"
            f"üéØ –ù–æ—Ä–º–∞ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏: <b>{daily_calories} –∫–∫–∞–ª</b>\n"
            f"ü•©–ë: {protein_norm} –≥, ü•ë–ñ: {fat_norm} –≥, üçû–£: {carbs_norm} –≥",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
    
    return ConversationHandler.END

async def settings_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    status = get_notifications_status(user_id)
    logger.info(f"Open setting menu {user_id}")

    notif_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: [–í–∫–ª—é—á–µ–Ω—ã]" if status else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: [–í—ã–∫–ª—é—á–µ–Ω—ã]"

    keyboard = [
        [InlineKeyboardButton(notif_text, callback_data="toggle_notifications")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:  # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –∫–Ω–æ–ø–∫–∏
        await update.callback_query.edit_message_text(
            "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @yakumuro", reply_markup=reply_markup
        )
    else:  # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /settings
        await update.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @yakumuro", reply_markup=reply_markup)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑ –≤ 16 —á–∞—Å–æ–≤
async def toggle_notifications(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    current_status = get_notifications_status(user_id)
    new_status = not current_status

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    set_notifications(user_id, new_status)
    logger.info(f"Edit settings notification {user_id}: {new_status}")

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    status_text = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if new_status else "üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã"
    await query.answer()
    await query.edit_message_text(
        text=f"{status_text}\n\n–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="toggle_notifications")]
        ])
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
profile_handler = MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), profile)
stats_handler = MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats)
settings_handler = MessageHandler(filters.Regex("^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), settings_menu)


meal_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏$"), add_meal_start)],
    states={
        ADD_MEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_food_input), MessageHandler(filters.VOICE, add_food_voice),],
        AWAIT_CONFIRM: [
            CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$"),
            CallbackQueryHandler(retry_meal, pattern="^retry_meal$")
        ]
    },
    fallbacks=[CommandHandler('cancel', cancel_meal)],
    per_user=True
)

# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∑–∞–º–µ–Ω—è—é—Ç —Å—Ç–∞—Ä—ã–µ ConversationHandler'—ã) ---
edit_profile_handler = CallbackQueryHandler(edit_profile_start, pattern="edit_profile")
edit_name_handler = CallbackQueryHandler(edit_name_callback, pattern="edit_name")
edit_weight_handler = CallbackQueryHandler(edit_weight_callback, pattern="edit_weight")
edit_height_handler = CallbackQueryHandler(edit_height_callback, pattern="edit_height")
edit_age_handler = CallbackQueryHandler(edit_age_callback, pattern="edit_age")
edit_gender_handler = CallbackQueryHandler(edit_gender_callback, pattern="edit_gender")
edit_activity_handler = CallbackQueryHandler(edit_activity_callback, pattern="edit_activity")
edit_goal_handler = CallbackQueryHandler(edit_goal_callback, pattern="edit_goal")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
set_gender_male_handler = CallbackQueryHandler(set_gender_male, pattern="set_gender_male")
set_gender_female_handler = CallbackQueryHandler(set_gender_female, pattern="set_gender_female")
set_activity_none_handler = CallbackQueryHandler(set_activity_none, pattern="set_activity_none")
set_activity_low_handler = CallbackQueryHandler(set_activity_low, pattern="set_activity_low")
set_activity_medium_handler = CallbackQueryHandler(set_activity_medium, pattern="set_activity_medium")
set_activity_high_handler = CallbackQueryHandler(set_activity_high, pattern="set_activity_high")
set_goal_maintain_handler = CallbackQueryHandler(set_goal_maintain, pattern="set_goal_maintain")
set_goal_lose_handler = CallbackQueryHandler(set_goal_lose, pattern="set_goal_lose")
set_goal_gain_handler = CallbackQueryHandler(set_goal_gain, pattern="set_goal_gain")
set_rate_lose_slow_handler = CallbackQueryHandler(set_rate_lose_slow, pattern="set_rate_lose_slow")
set_rate_lose_medium_handler = CallbackQueryHandler(set_rate_lose_medium, pattern="set_rate_lose_medium")
set_rate_lose_fast_handler = CallbackQueryHandler(set_rate_lose_fast, pattern="set_rate_lose_fast")
set_rate_gain_slow_handler = CallbackQueryHandler(set_rate_gain_slow, pattern="set_rate_gain_slow")
set_rate_gain_medium_handler = CallbackQueryHandler(set_rate_gain_medium, pattern="set_rate_gain_medium")
set_rate_gain_fast_handler = CallbackQueryHandler(set_rate_gain_fast, pattern="set_rate_gain_fast")


conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight_handler)],
        HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height_handler)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
        GENDER: [CallbackQueryHandler(gender_handler)],
        ACTIVITY: [CallbackQueryHandler(activity_handler)],
        GOAL: [CallbackQueryHandler(goal_handler, pattern="^goal_")],
        TARGET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, target_weight_handler)],
        GOAL_RATE: [CallbackQueryHandler(goal_rate_handler, pattern="^rate_")]
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_user=True
)

# –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
confirm_handler = CallbackQueryHandler(confirm_meal, pattern="^confirm_meal$")
clear_today_handler = CallbackQueryHandler(clear_today, pattern="^clear_today$")
retry_handler = CallbackQueryHandler(retry_meal, pattern="^retry_meal$")
last_7_days_handler = CallbackQueryHandler(show_last_7_days, pattern="^last_7_days$")
goal_callback_handler = CallbackQueryHandler(goal_handler, pattern="^goal_")
goal_rate_callback_handler = CallbackQueryHandler(goal_rate_handler, pattern="^rate_")
voice_message_handler = MessageHandler(filters.VOICE, add_food_voice)
toggle_notifications_handler = CallbackQueryHandler(toggle_notifications, pattern="toggle_notifications")
