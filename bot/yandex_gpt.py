import aiohttp
import json
from logger_config import logger
import math
import re

async def analyze_food_with_gpt(food_text: str, api_key: str, folder_id: str) -> dict:
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Å—ä–µ–ª.

### –ü—Ä–∞–≤–∏–ª–∞:
1. –†–∞–∑–±–µ–π –±–ª—é–¥–æ –Ω–∞ **–æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ–º–ª–µ—Ç" ‚Üí —è–π—Ü–∞, –º–æ–ª–æ–∫–æ, –º–∞—Å–ª–æ).
2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω **–≤–µ—Å –∏–ª–∏ –æ–±—ä—ë–º** (–≥—Ä–∞–º–º—ã, –º–ª, —à—Ç—É–∫–∏) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.
3. –ï—Å–ª–∏ –≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –æ—Ü–µ–Ω–∏ –∫–∞–∫ **—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Ä—Ü–∏—é** (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —è–π—Ü–æ = 50 –≥, 1 –ª–æ–º—Ç–∏–∫ —Ö–ª–µ–±–∞ = 30 –≥).
4. –£—á–∏—Ç—ã–≤–∞–π –∫–∞–ª–æ—Ä–∏–∏ **–≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤**, –≤–∫–ª—é—á–∞—è –º–∞—Å–ª–æ, –º–∞–π–æ–Ω–µ–∑, —Å–æ—É—Å—ã.
5. –ö–∞–ª–æ—Ä–∏–∏ —É–∫–∞–∑—ã–≤–∞–π –≤ **–∫–∫–∞–ª**.
6. –û—Ç–¥–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏ –¥–ª—è –±–ª—é–¥–∞ –≤ —Ü–µ–ª–æ–º.
7. –í–µ—Ä–Ω–∏ **–¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON**, –±–µ–∑ ```json, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

### –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
  "items": [
    {{"product": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "quantity": "100 –≥", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ}}
  ],
  "total": {{
    "calories": —á–∏—Å–ª–æ,
    "protein": —á–∏—Å–ª–æ,
    "fat": —á–∏—Å–ª–æ,
    "carbs": —á–∏—Å–ª–æ
  }}
}}

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
"{food_text}"
"""

    payload = {
        "modelUri": f"gpt://{folder_id}/yandexgpt-lite/latest",
        "completionOptions": {"temperature": 0.3, "maxTokens": "500"},
        "messages": [{"role": "user", "text": prompt}]
    }

    logger.info(f"Send YandexGPT: {food_text}")
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            logger.info(f"Response status YandexGPT: {resp.status}")
            if resp.status != 200:
                text = await resp.text()
                logger.error(f"Error GPT: {text}")
                raise Exception(f"GPT error {resp.status}: {text}")

            result = await resp.json()
            logger.info(f"Response YandexGPT: {result}")

    try:
        text = result['result']['alternatives'][0]['message']['text'].strip()
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç GPT: {repr(text)}")

        # üîß –£–¥–∞–ª—è–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É ``` –∏ —è–∑—ã–∫–∏
        if text.startswith('```'):
            text = text.split('\n', 1)[1]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ```
            text = text.rsplit('```', 1)[0]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å ```
            text = text.strip()

        if text.startswith('```json'):
            text = text[7:].strip()
            if text.endswith('```'):
                text = text[:-3].strip()

        print(f"üìù –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        # –ü–∞—Ä—Å–∏–º JSON
        data = json.loads(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not isinstance(data, dict):
            raise ValueError("JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")

        if "total" not in data:
            raise ValueError("–ù–µ—Ç –±–ª–æ–∫–∞ total —Å –ë–ñ–£")

        totals = data["total"]
        if not isinstance(totals, dict):
            raise ValueError("total –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")

        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = totals.get("calories", 0)
        protein = totals.get("protein", 0)
        fat = totals.get("fat", 0)
        carbs = totals.get("carbs", 0)

        # items –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º
        if not isinstance(data.get("items"), list):
            data["items"] = []

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏: {data}")
        return data

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        print(f"–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {text}")
        raise Exception("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        raise

import aiohttp
import json
import re
from logger_config import logger

# --- GPT –∑–∞–ø—Ä–æ—Å –∏ –∞–Ω–∞–ª–∏–∑ –º–µ–Ω—é ---
async def analyze_menu_with_gpt(
    user_goal: str,
    daily_calories: float,
    protein_norm: float,
    fat_norm: float,
    carbs_norm: float,
    meals_per_day: int,
    prefs_and_restrictions: str,
    api_key: str,
    folder_id: str
) -> dict:

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –ø—Ä–æ–º—Ç–∞
    if meals_per_day == 1:
        meal_names = ["–ü—Ä–∏—ë–º 1"]
    elif meals_per_day == 2:
        meal_names = ["–ü—Ä–∏—ë–º 1", "–ü—Ä–∏—ë–º 2"]
    elif meals_per_day == 3:
        meal_names = ["–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω"]
    elif meals_per_day == 4:
        meal_names = ["–ó–∞–≤—Ç—Ä–∞–∫", "–ü–µ—Ä–µ–∫—É—Å 1", "–û–±–µ–¥", "–£–∂–∏–Ω"]
    else:  # 5
        meal_names = ["–ó–∞–≤—Ç—Ä–∞–∫", "–ü–µ—Ä–µ–∫—É—Å 1", "–û–±–µ–¥", "–ü–µ—Ä–µ–∫—É—Å 2", "–£–∂–∏–Ω"]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ GPT
    meal_names_json = ", ".join([f'{{"name": "{name}", "items": []}}' for name in meal_names])

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —á–µ—Ç–∫–∏–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å —Å {meals_per_day} –ø—Ä–∏—ë–º–∞–º–∏ –ø–∏—â–∏ –¥–ª—è —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{user_goal}" –∏ –ö–ë–ñ–£:
- –ö–∞–ª–æ—Ä–∏–∏: {daily_calories}
- –ë–µ–ª–∫–∏: {protein_norm} –≥
- –ñ–∏—Ä—ã: {fat_norm} –≥
- –£–≥–ª–µ–≤–æ–¥—ã: {carbs_norm} –≥
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {prefs_and_restrictions}

–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –ö–∞–∂–¥—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã).
2. –û–±—â–µ–µ –ø–æ–ª–µ "totals" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—É–º–º–æ–π –≤—Å–µ—Ö –±–ª—é–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª. **–ù–µ –∫–æ–ø–∏—Ä—É–π –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**.
3. –ù–æ—Ä–º—É –ö–ë–ñ–£ –Ω—É–∂–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –¥–æ—Å—Ç–∏—á—å, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –µ—ë.
4. –ï—Å–ª–∏ –±–ª—é–¥ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤, –¥–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–∏—ë–º—ã —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –±–ª—é–¥–∞–º–∏.

–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –¥–ª—è {meals_per_day} –ø—Ä–∏—ë–º–æ–≤: {meal_names_json}

–°—Ç—Ä–æ–≥–æ –≤–µ—Ä–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å —Ç–∞–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º:
{{
  "meals": [
    {meal_names_json}
  ][:{meals_per_day}],
  "totals": {{"calories": 0, "protein": 0, "fat": 0, "carbs": 0}}
}}
–û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""


    payload = {
        "modelUri": f"gpt://{folder_id}/yandexgpt/rc",
        "completionOptions": {"temperature": 0.7, "maxTokens": 1200},
        "messages": [{"role": "user", "text": prompt}]
    }

    logger.info(f"GPT request start: goal={user_goal}, meals_per_day={meals_per_day}")
    logger.debug(f"GPT prompt prepared: {prompt[:300]}...")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json=payload, headers=headers, timeout=60) as resp:
                logger.info(f"Response status YandexGPT: {resp.status}")
                if resp.status != 200:
                    text = await resp.text()
                    logger.error(f"Error GPT response: {text}")
                    raise RuntimeError(f"GPT error {resp.status}: {text}")
                result = await resp.json()
                logger.debug(f"Raw GPT response: {json.dumps(result)[:500]}...")
        except Exception as e:
            logger.error(f"Network error while connecting to GPT: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")

    try:
        result_text = result['result']['alternatives'][0]['message']['text'].strip()
        logger.info(f"Raw GPT text received (first 300 chars): {result_text[:300]}")
    except Exception as e:
        logger.error(f"Error extracting GPT text: {e}")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")

    try:
        clean_text = re.sub(r"^```[\w]*\n?|```$", "", result_text).strip()
        menu_data = json.loads(clean_text)
        logger.info("GPT response successfully parsed as JSON")
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}\nResponse text: {clean_text[:500]}")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç GPT: {e}")

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    if len(menu_data.get("meals", [])) != meals_per_day:
        menu_data["meals"] = menu_data.get("meals", [])[:meals_per_day]
        logger.warning(f"Adjusted meals count to {meals_per_day}")

    return menu_data