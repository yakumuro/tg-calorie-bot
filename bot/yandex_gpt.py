import aiohttp
import json
from logger_config import logger
import math
import re

async def analyze_food_with_gpt(food_text: str, api_key: str, folder_id: str) -> dict:
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Å—ä–µ–ª.

### –ü—Ä–∞–≤–∏–ª–∞:
1. –†–∞–∑–±–µ–π –±–ª—é–¥–æ –Ω–∞ **–æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ–º–ª–µ—Ç" ‚Üí —è–π—Ü–∞, –º–æ–ª–æ–∫–æ, –º–∞—Å–ª–æ).
2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω **–≤–µ—Å –∏–ª–∏ –æ–±—ä—ë–º** (–≥—Ä–∞–º–º—ã, –º–ª, —à—Ç—É–∫–∏) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.
3. –ï—Å–ª–∏ –≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –æ—Ü–µ–Ω–∏ –∫–∞–∫ **—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Ä—Ü–∏—é** (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —è–π—Ü–æ = 50 –≥, 1 –ª–æ–º—Ç–∏–∫ —Ö–ª–µ–±–∞ = 30 –≥).
4. –£—á–∏—Ç—ã–≤–∞–π –∫–∞–ª–æ—Ä–∏–∏ **–≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤**, –≤–∫–ª—é—á–∞—è –º–∞—Å–ª–æ, –º–∞–π–æ–Ω–µ–∑, —Å–æ—É—Å—ã.
5. –ö–∞–ª–æ—Ä–∏–∏ —É–∫–∞–∑—ã–≤–∞–π –≤ **–∫–∫–∞–ª**.
6. –û—Ç–¥–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏ –¥–ª—è –±–ª—é–¥–∞ –≤ —Ü–µ–ª–æ–º.
7. –í–µ—Ä–Ω–∏ **–¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON**, –±–µ–∑ ```json, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

### –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
  "items": [
    {{"product": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "quantity": "100 –≥", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ}}
  ],
  "total": {{
    "calories": —á–∏—Å–ª–æ,
    "protein": —á–∏—Å–ª–æ,
    "fat": —á–∏—Å–ª–æ,
    "carbs": —á–∏—Å–ª–æ
  }}
}}

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
"{food_text}"
"""

    payload = {
        "modelUri": f"gpt://{folder_id}/yandexgpt-lite/latest",
        "completionOptions": {"temperature": 0.3, "maxTokens": "500"},
        "messages": [{"role": "user", "text": prompt}]
    }

    logger.info(f"Send YandexGPT: {food_text}")
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            logger.info(f"Response status YandexGPT: {resp.status}")
            if resp.status != 200:
                text = await resp.text()
                logger.error(f"Error GPT: {text}")
                raise Exception(f"GPT error {resp.status}: {text}")

            result = await resp.json()
            logger.info(f"Response YandexGPT: {result}")

    try:
        text = result['result']['alternatives'][0]['message']['text'].strip()
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç GPT: {repr(text)}")

        # üîß –£–¥–∞–ª—è–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É ``` –∏ —è–∑—ã–∫–∏
        if text.startswith('```'):
            text = text.split('\n', 1)[1]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ```
            text = text.rsplit('```', 1)[0]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å ```
            text = text.strip()

        if text.startswith('```json'):
            text = text[7:].strip()
            if text.endswith('```'):
                text = text[:-3].strip()

        print(f"üìù –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        # –ü–∞—Ä—Å–∏–º JSON
        data = json.loads(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not isinstance(data, dict):
            raise ValueError("JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")

        if "total" not in data:
            raise ValueError("–ù–µ—Ç –±–ª–æ–∫–∞ total —Å –ë–ñ–£")

        totals = data["total"]
        if not isinstance(totals, dict):
            raise ValueError("total –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")

        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = totals.get("calories", 0)
        protein = totals.get("protein", 0)
        fat = totals.get("fat", 0)
        carbs = totals.get("carbs", 0)

        # items –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º
        if not isinstance(data.get("items"), list):
            data["items"] = []

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏: {data}")
        return data

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        print(f"–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {text}")
        raise Exception("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        raise

# --- GPT –∑–∞–ø—Ä–æ—Å –∏ –∞–Ω–∞–ª–∏–∑ –º–µ–Ω—é (–ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
async def analyze_menu_with_gpt(
    user_goal: str,
    daily_calories: float,
    protein_norm: float,
    fat_norm: float,
    carbs_norm: float,
    meals_per_day: int,
    prefs_and_restrictions: str,
    api_key: str,
    folder_id: str
) -> dict:
    import aiohttp, json, re, logging
    logger = logging.getLogger(__name__)

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {"Authorization": f"Api-Key {api_key}", "Content-Type": "application/json"}

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π
    percents_map = {
        1: [100],
        2: [45, 55],
        3: [25, 45, 30],
        4: [25, 10, 40, 25],
        5: [20, 8, 40, 8, 24]
    }
    percents = percents_map.get(meals_per_day, percents_map[3])

    # –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏—ë–º–æ–≤
    names_map = {
        1: ["–ü—Ä–∏—ë–º 1"],
        2: ["–ü—Ä–∏—ë–º 1", "–ü—Ä–∏—ë–º 2"],
        3: ["–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω"],
        4: ["–ó–∞–≤—Ç—Ä–∞–∫", "–ü–µ—Ä–µ–∫—É—Å 1", "–û–±–µ–¥", "–£–∂–∏–Ω"],
        5: ["–ó–∞–≤—Ç—Ä–∞–∫", "–ü–µ—Ä–µ–∫—É—Å 1", "–û–±–µ–¥", "–ü–µ—Ä–µ–∫—É—Å 2", "–£–∂–∏–Ω"]
    }
    meal_names = names_map.get(meals_per_day, names_map[3])

    # –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏—ë–º—É
    meal_targets = [
        {"name": n, "target_calories": int(round(daily_calories * p / 100))}
        for n, p in zip(meal_names, percents)
    ]

    # –ë–∞–∑–æ–≤—ã–π JSON-—Å–∫–µ–ª–µ—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    meal_names_json = ", ".join([f'{{"name": "{n}", "items": []}}' for n in meal_names])

    # üî• –ù–æ–≤—ã–π —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ–º–ø—Ç
    prompt = f"""
–°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å ({meals_per_day} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏) –¥–ª—è —Ü–µ–ª–∏: "{user_goal}".
–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å (–ö–ë–ñ–£):
- –ö–∞–ª–æ—Ä–∏–∏: {daily_calories}
- –ë–µ–ª–∫–∏: {protein_norm} –≥
- –ñ–∏—Ä—ã: {fat_norm} –≥
- –£–≥–ª–µ–≤–æ–¥—ã: {carbs_norm} –≥
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {prefs_and_restrictions}

–û–ß–ï–ù–¨ –í–ê–ñ–ù–û ‚Äî –ü–†–ê–í–ò–õ–ê:
1) –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ **JSON** (–Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON).
2) –ü–æ–ª–µ "meals" = –º–∞—Å—Å–∏–≤ —Ä–æ–≤–Ω–æ –∏–∑ {meals_per_day} –æ–±—ä–µ–∫—Ç–æ–≤:
   {{
     "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞",
     "items": [{{"product": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "quantity": "150 –≥", "calories": 200, "protein": 15, "fat": 5, "carbs": 20}}, ...],
     "calories": —á–∏—Å–ª–æ,
     "protein": —á–∏—Å–ª–æ,
     "fat": —á–∏—Å–ª–æ,
     "carbs": —á–∏—Å–ª–æ
   }}
3) –ö–∞–ª–æ—Ä–∏–∏ –ø—Ä–∏—ë–º–∞ ‚âà –µ–≥–æ —Ü–µ–ª–µ–≤–æ–π –¥–æ–ª–∏:
   {json.dumps(meal_targets, ensure_ascii=False)} (–¥–æ–ø—É—Å–∫ ¬±10%).
4) "calories" –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞ = —Å—É–º–º–∞ –∫–∞–ª–æ—Ä–∏–π –µ–≥–æ items.
5) "totals" = —Å—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–∏—ë–º–æ–≤ (calories/protein/fat/carbs). –ù–µ –∫–æ–ø–∏—Ä—É–π –Ω–æ—Ä–º—É.
6) totals.calories –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {int(daily_calories*0.95)}‚Äì{int(daily_calories)} –∫–∫–∞–ª.
7) –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø–æ—Ä—Ü–∏–∏.
8) –û—Ç–≤–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ JSON. –ü—Ä–∏–º–µ—Ä:
{{
  "meals": [
    {meal_names_json}
  ],
  "totals": {{"calories": 0, "protein": 0, "fat": 0, "carbs": 0}}
}}
"""

    payload = {
        "modelUri": f"gpt://{folder_id}/yandexgpt/rc",
        "completionOptions": {"temperature": 0.7, "maxTokens": 1400},
        "messages": [{"role": "user", "text": prompt}]
    }

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    async def send_request(pl):
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=pl, headers=headers, timeout=60) as resp:
                txt = await resp.text()
                if resp.status != 200:
                    raise RuntimeError(f"GPT error {resp.status}: {txt}")
                js = await resp.json()
                try:
                    return js["result"]["alternatives"][0]["message"]["text"]
                except Exception:
                    return txt

    def extract_json_substring(text: str):
        text = re.sub(r"^```[\w]*\n", "", text)
        text = re.sub(r"\n```$", "", text)
        match = re.search(r'(\{.*\}|\[.*\])', text, flags=re.S)
        if not match:
            raise ValueError("JSON not found")
        return match.group(0)

    def parse_num(v):
        if isinstance(v, (int, float)):
            return float(v)
        m = re.search(r"[-+]?\d+(?:[.,]\d+)?", str(v))
        return float(m.group(0).replace(",", ".")) if m else 0.0

    def recompute(md: dict):
        totals = {"calories": 0, "protein": 0, "fat": 0, "carbs": 0}
        for meal in md.get("meals", []):
            cal = prot = fat = ch = 0
            for it in meal.get("items", []):
                cal += parse_num(it.get("calories"))
                prot += parse_num(it.get("protein"))
                fat += parse_num(it.get("fat"))
                ch += parse_num(it.get("carbs"))
            meal["calories"] = int(round(cal))
            meal["protein"] = round(prot, 1)
            meal["fat"] = round(fat, 1)
            meal["carbs"] = round(ch, 1)
            totals["calories"] += cal
            totals["protein"] += prot
            totals["fat"] += fat
            totals["carbs"] += ch
        md["totals"] = {
            "calories": int(round(totals["calories"])),
            "protein": round(totals["protein"], 1),
            "fat": round(totals["fat"], 1),
            "carbs": round(totals["carbs"], 1),
        }
        return md

    # --- –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å ---
    raw = await send_request(payload)
    menu = json.loads(extract_json_substring(raw))
    menu = recompute(menu)

    # --- –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
    total_cal = menu["totals"]["calories"]
    if total_cal > daily_calories:
        # –°–∫–µ–π–ª–∏–º –≤–Ω–∏–∑
        scale = daily_calories / total_cal
        for meal in menu["meals"]:
            for it in meal["items"]:
                for k in ("calories", "protein", "fat", "carbs"):
                    it[k] = int(it[k]*scale) if k=="calories" else round(it[k]*scale, 1)
        menu = recompute(menu)

    elif total_cal < daily_calories*0.95:
        # –û–¥–∏–Ω —Ä–µ—Ç—Ä–∞–π: –ø—Ä–æ—Å–∏–º —É–≤–µ–ª–∏—á–∏—Ç—å
        retry_prompt = prompt + f"\n\n–í –ø—Ä–µ–¥—ã–¥—É—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –±—ã–ª–æ {total_cal} –∫–∫–∞–ª. –£–≤–µ–ª–∏—á—å –ø–æ—Ä—Ü–∏–∏/–±–ª—é–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å {int(daily_calories*0.95)}‚Äì{int(daily_calories)} –∫–∫–∞–ª."
        payload["messages"] = [{"role": "user", "text": retry_prompt}]
        raw2 = await send_request(payload)
        menu2 = recompute(json.loads(extract_json_substring(raw2)))
        if abs(daily_calories - menu2["totals"]["calories"]) < abs(daily_calories - total_cal):
            menu = menu2

    return menu
