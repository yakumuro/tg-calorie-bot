import aiohttp
import json

async def analyze_food_with_gpt(food_text: str, api_key: str, folder_id: str) -> dict:
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Å—ä–µ–ª.

### –ü—Ä–∞–≤–∏–ª–∞:
1. –†–∞–∑–±–µ–π –±–ª—é–¥–æ –Ω–∞ **–æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ–º–ª–µ—Ç" ‚Üí —è–π—Ü–∞, –º–æ–ª–æ–∫–æ, –º–∞—Å–ª–æ).
2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω **–≤–µ—Å –∏–ª–∏ –æ–±—ä—ë–º** (–≥—Ä–∞–º–º—ã, –º–ª, —à—Ç—É–∫–∏) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.
3. –ï—Å–ª–∏ –≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –æ—Ü–µ–Ω–∏ –∫–∞–∫ **—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Ä—Ü–∏—é** (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —è–π—Ü–æ = 50 –≥, 1 –ª–æ–º—Ç–∏–∫ —Ö–ª–µ–±–∞ = 30 –≥).
4. –£—á–∏—Ç—ã–≤–∞–π –∫–∞–ª–æ—Ä–∏–∏ **–≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤**, –≤–∫–ª—é—á–∞—è –º–∞—Å–ª–æ, –º–∞–π–æ–Ω–µ–∑, —Å–æ—É—Å—ã.
5. –ö–∞–ª–æ—Ä–∏–∏ —É–∫–∞–∑—ã–≤–∞–π –≤ **–∫–∫–∞–ª**.
6. –í–µ—Ä–Ω–∏ **–¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON**, –±–µ–∑ ```json, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

### –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
  "items": [
    {{"product": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "quantity": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏", "calories": —á–∏—Å–ª–æ}}
  ],
  "total_calories": —á–∏—Å–ª–æ
}}

### –ü—Ä–∏–º–µ—Ä—ã:
–í–≤–æ–¥: "200 –≥ —Ç–≤–æ—Ä–æ–≥–∞ 9%"
–í—ã—Ö–æ–¥:
{{"items": [{{"product": "—Ç–≤–æ—Ä–æ–≥", "quantity": "200 –≥", "calories": 180}}], "total_calories": 180}}

–í–≤–æ–¥: "–ì—Ä–µ—á–∫–∞ —Å —Ç—É—à–µ–Ω–∫–æ–π"
–í—ã—Ö–æ–¥:
{{
  "items": [
    {{"product": "–≥—Ä–µ—á–∫–∞", "quantity": "150 –≥", "calories": 150}},
    {{"product": "—Ç—É—à–µ–Ω–∫–∞", "quantity": "100 –≥", "calories": 280}}
  ],
  "total_calories": 430
}}

–í–≤–æ–¥: "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º"
–í—ã—Ö–æ–¥:
{{
  "items": [
    {{"product": "–∫–æ—Ñ–µ", "quantity": "200 –º–ª", "calories": 5}},
    {{"product": "–º–æ–ª–æ–∫–æ", "quantity": "50 –º–ª", "calories": 65}}
  ],
  "total_calories": 70
}}

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
"{food_text}"
"""

    payload = {
        "modelUri": f"gpt://{folder_id}/yandexgpt-lite/latest",
        "completionOptions": {"temperature": 0.3, "maxTokens": "500"},
        "messages": [{"role": "user", "text": prompt}]
    }

    print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ GPT: {food_text}")
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GPT: {resp.status}")
            if resp.status != 200:
                text = await resp.text()
                print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {text}")
                raise Exception(f"GPT error {resp.status}: {text}")

            result = await resp.json()
            print(f"üü¢ –û—Ç–≤–µ—Ç GPT: {result}")

    try:
        text = result['result']['alternatives'][0]['message']['text'].strip()
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç GPT: {repr(text)}")

        # üîß –£–¥–∞–ª—è–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É ``` –∏ —è–∑—ã–∫–∏
        if text.startswith('```'):
            text = text.split('\n', 1)[1]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ```
            text = text.rsplit('```', 1)[0]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å ```
            text = text.strip()

        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å ```json
        if text.startswith('```json'):
            text = text[7:].strip()
            if text.endswith('```'):
                text = text[:-3].strip()

        print(f"üìù –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        # –ü–∞—Ä—Å–∏–º JSON
        data = json.loads(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not isinstance(data, dict):
            raise ValueError("JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        if 'total_calories' not in data:
            raise ValueError("–ù–µ—Ç –ø–æ–ª—è total_calories")
        if not isinstance(data.get('items'), list):
            data['items'] = []

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏: {data}")
        return data

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        print(f"–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {text}")
        raise Exception("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        raise