from datetime import time, timedelta, datetime
import pytz
from bot.database import get_db_connection
from logger_config import logger

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminder(context):
    application = context.application

    cutoff = datetime.utcnow() - timedelta(hours=12)

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT u.user_id 
        FROM users u
        LEFT JOIN (
            SELECT user_id, MAX(timestamp) as last_meal
            FROM meals GROUP BY user_id
        ) m ON u.user_id = m.user_id
        WHERE u.notifications_enabled = 1
          AND (m.last_meal IS NULL OR datetime(m.last_meal) < ?)
    """, (cutoff.isoformat(),))
    users = [row[0] for row in cursor.fetchall()]
    conn.close()

    for user_id in users:
        try:
            await application.bot.send_message(
                chat_id=user_id,
                text=(
                    "–ù–µ –∑–∞–±—ã–≤–∞–π –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∏—ë–º—ã –ø–∏—â–∏!\n\n"
                    "–ï—Å–ª–∏ –±—É–¥–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ‚Äî –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Å–≤–æ–µ–π —Ü–µ–ª–∏ –±—ã—Å—Ç—Ä–µ–µ üí™\n\n"
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
                )
            )
            logger.info(f"Sent reminder to user {user_id}")
        except Exception as e:
            logger.error(f"Error sending reminder to user {user_id}: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
def setup_scheduler(application):
    moscow_tz = pytz.timezone("Europe/Moscow")
    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ
    application.job_queue.run_daily(
        send_reminder,
        time=time(hour=10, minute=00, tzinfo=moscow_tz)
    )
    # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    application.job_queue.run_repeating(send_meal_reminders, interval=60, first=0)
    logger.info("Reminder scheduler started (daily at 10:00 MSK)")
    logger.info("Notofication scheduler started (every 60 sek)")

async def send_meal_reminders(context):
    application = context.application
    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz).strftime("%H:%M")

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT u.user_id, u.notifications_enabled, m.name
        FROM users u
        JOIN meal_reminders m ON u.user_id = m.user_id
        WHERE m.time = ?
    """, (now,))
    reminders = cursor.fetchall()
    conn.close()

    for r in reminders:
        user_id, notifications_enabled, meal_name = r

        # –∑–∞—â–∏—Ç–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not notifications_enabled:
            logger.debug(f"Skip reminder for user {user_id}: notifications disabled")
            continue

        try:
            await application.bot.send_message(
                user_id,
                f"üîî {meal_name}\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏."
            )
            logger.info(f"Sent meal reminder to user {user_id} ({meal_name})")
        except Exception as e:
            logger.error(f"Error sending meal reminder to {user_id}: {e}")